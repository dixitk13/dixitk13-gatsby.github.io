{"data":{"allMarkdownRemark":{"edges":[{"node":{"id":"89cae2c1-a37b-5dfa-9853-7ad98c9864e3","html":"<h1>Why I am adopting DRAFT pull requests?</h1>\n<p>I believe in making small pull requests and they can be either of features, bug fixes, changes/updates and improvements.</p>\n<p>I've always felt that need to entitle my PR's with:</p>\n<ul>\n<li>\n<p><code>[DO-NOT-MERGE]</code>:</p>\n<ul>\n<li>When i need to show it to my folks and get opnions or ideas and not having to send it out in an email/slack message.</li>\n<li>Or when I need to get it reviewed from other managers out there if the behavior is finally what they asked for.</li>\n<li>Or I need a build out prod version of my code</li>\n</ul>\n</li>\n<li>\n<p><code>[NEEDS-TESTING]</code>: when I've finished writing the code:</p>\n<ul>\n<li>but its 12am</li>\n<li>or maybe my codebase lacks e2e for all the other code surrounding mine.\nP.S: lets face it guys not everyone has strong e2e and pushes at 12 am, sets to auto-complete and sleeps the night.</li>\n</ul>\n</li>\n</ul>\n<p><code>[DRAFT]</code> is my rescuer here where any teammate isn't going to click merge/approve and call it a day but is definately going to have a look to leave out comments to chime and continue the discussions</p>\n<p>Ref: <a href=\"https://github.blog/2019-02-14-introducing-draft-pull-requests/\">https://github.blog/2019-02-14-introducing-draft-pull-requests/</a></p>\n<h2>What I follow as nomenclature for Pull Requests:</h2>\n<p>Most of my PR's follow a nomenclature for branch naming as well, call me victim of OCD but that's me!</p>\n<ul>\n<li><code>&#x3C;username>/hotfix/&#x3C;branch-code-name></code> : for hot-fixes of course</li>\n<li><code>&#x3C;username>/changes/&#x3C;branch-code-name></code> : for changes/improvements</li>\n<li><code>&#x3C;username>/feature/&#x3C;branch-code-name></code>: for feature updates</li>\n</ul>\n<p>where branch code name is an at-most 3 letter word for what the branch is doing. I try not to name them like with prefix of an issue number since I am bad with numbers, but if you are that's the best way to do your nomenclature TBH.</p>\n<p>I usually try to keep my commit messages short, so its readable in single line - about 50 or less should do it. If you'd like to write more text, after the 50 lines a new line should be added and rest of the text should be wrapped at 72 lines-ish.</p>\n<p>A good read about how I adopted the above <a href=\"https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\">here</a></p>\n<p>Some argue making the commit message like a summary helps them the below for sending (nicely formatted emails)[https://thoughtbot.com/blog/send-a-patch-to-someone-using-git-format-patch], but meh - email's not going to live long hopefully.</p>\n<pre><code>git format-patch &#x3C;branch> --stdout\n</code></pre>\n<p>Adopt <strong>rebase</strong>. It seems to keep the history clean, coming from the <strong>merge</strong> guy who used merge for several years now :)</p>","frontmatter":{"title":"Draft pull requests","date":"10 May, 2020","link":null,"tags":null,"images":null},"excerpt":"Why I am adopting DRAFT pull requests? I believe in making small pull requests and they can be either of features, bug fixes, changes…"}},{"node":{"id":"047d52a3-80ec-59d6-9247-6fd39fae15d6","html":"<p>I am currently a console developer on OCI(Oracle Cloud Infrastructure).</p>\n<ul>\n<li>We build and maintain next generation console applications on OCI.</li>\n</ul>","frontmatter":{"title":"What I do today @ Oracle","date":"05 May, 2020","link":"https://console.us-phoenix-1.oraclecloud.com/","tags":["react","redux","typescript","react-hooks","oui"],"images":["react","typescript","redux"]},"excerpt":"I am currently a console developer on OCI(Oracle Cloud Infrastructure). We build and maintain next generation console applications on OCI."}},{"node":{"id":"74ebdc83-f494-577b-b864-5310dbb1d885","html":"<h1>Typescript discriminator</h1>\n<p>Very often we have use-cases where we would like to use a single type <code>Union Type</code> but still be sure about the properties inside them.</p>\n<pre><code class=\"language-{javascript}\">interface Employee {\n  name: string;\n    salary: number;\n}\n\ninterface HumanResource {\n  name: string;\n  power: boolean;\n}\n\nlet person: Employee | HumanResource;\n</code></pre>\n<p>But under the hood Typescript union's are more of \"common\" properties inside them instead of \"having all the properties\".</p>\n<p>So when you try and use it like:</p>\n<pre><code class=\"language-{javascript}\">let helloPerson = (person: Employee | HumanResource): void => {\n   console.log(person.&#x3C;only has properties common to Employee &#x26; HumanResource aka name>);\n}\n</code></pre>\n<p>where as you would expect person to have <code>{name, salary}</code> or <code>{name, power}</code> and choose between them depending on what person is.</p>\n<p>This is where discriminators come in power-play. Bear with my variable nomenclature:</p>\n<p>Lets define an enum to contain both the use-cases of Person's we have, calling it <code>PersonType</code> and then define a type combining <code>HumanResource</code> and <code>Employee</code>.</p>\n<pre><code class=\"language-{javascript}\">enum PersonType { \"EMPLOYEE\" , \"HR\" }\n\ninterface Employee {\n  name: string;\n  type: PersonType.EMPLOYEE\n    salary: number;\n}\n\ninterface HumanResource {\n  name: string;\n  type: PersonType.HR\n  power: boolean;\n}\n\ntype Person = HumanResource | Employee;\n\nlet person: Employee | HumanResource;\n\nlet helloPerson = (person: Person): void => {\n  switch(person.type) {\n    case PersonType.EMPLOYEE:\n      // this gives you both name/salary since now TS understands\n      // and discriminates between the two types you have\n      console.log(person.{gives you name, salary});\n  }\n}\n</code></pre>","frontmatter":{"title":"Draft pull requests","date":"10 April, 2020","link":null,"tags":null,"images":null},"excerpt":"Typescript discriminator Very often we have use-cases where we would like to use a single type Union Type but still be sure about the…"}},{"node":{"id":"7c8b8dec-ad14-5bb9-9c78-46881839f1e5","html":"<p>A project demonstrating covid visualization with worldometer data and react-map-gl. The entire project is hosted on heroku dynos using Redis &#x26; Heroku Scheduler.\nCo-authored w/ <a href=\"https://github.com/bansalrachita\">@bansalrachita</a></p>\n<p>Express routes serve data which is updated within Redis via Heroku Scheduler every hour and cheerio based scrapper.</p>\n<p>Read more about it <a href=\"https://medium.com/@rachitabansal/visualizing-covid-19-159e86e6ac06\">here</a>.</p>","frontmatter":{"title":"Covid Visualization","date":"01 April, 2020","link":"http://covid-visual.herokuapp.com/","tags":["nodeJS","react","redis","scheduler","heroku"],"images":["node","react","redis"]},"excerpt":"A project demonstrating covid visualization with worldometer data and react-map-gl. The entire project is hosted on heroku dynos using Redis…"}},{"node":{"id":"f3343e26-f5a9-531f-ae66-ce514795266d","html":"<p>PeopleList using Typescript and React.</p>\n<ul>\n<li>Build a custom Accordian for re-usability purposes.</li>\n<li>Uses custom React hooks and Typescript for educational purposes.</li>\n<li>Deployed on herokuapp.</li>\n</ul>","frontmatter":{"title":"People List","date":"01 January, 2020","link":"http://people-list.herokuapp.com/","tags":["react","typescript","react-hooks"],"images":["react","typescript","heroku"]},"excerpt":"PeopleList using Typescript and React. Build a custom Accordian for re-usability purposes. Uses custom React hooks and Typescript for…"}},{"node":{"id":"f3f39f92-ff1f-5e4e-93e7-d59242814382","html":"<p>I worked on a Web Application based on Flask, MongoDB, MySQL,\nReact &#x26; Redux.</p>\n<ul>\n<li>We use blueprintJS for UI Components and follow Airbnb standards for ECMAScript 6</li>\n<li>I have unilaterally implemented a custom notification system, using SNS/SQS\nand AWS Lambda, which notifies based on the latest record, insufficient state,\nthreshold levels, etc.</li>\n<li>Spearheaded the team to achieve CATO(Cloud Allowed to Operate),\na security process by Cisco, for operating in an external cloud.</li>\n<li>Designed an Admin System to grant access control for the entire organization.</li>\n<li>Integrated cflow into automation code base system to achieve code-coverage.</li>\n</ul>","frontmatter":{"title":"What I did @ Cisco","date":"01 January, 2019","link":"https://cafy.io","tags":["react","redux","javascript","blueprintjs","sql","python","mongodb","aws","cloudfront"],"images":["react","redux","javascript","blueprintjs","sql","python"]},"excerpt":"I worked on a Web Application based on Flask, MongoDB, MySQL,\nReact & Redux. We use blueprintJS for UI Components and follow Airbnb…"}},{"node":{"id":"10725067-ae9e-5a71-8724-4bba476a812f","html":"<p>A basic application which started with learning GraphQL and is transforming as a TODOs app</p>\n<ul>\n<li>Query and view markdowns via graphQL backend </li>\n<li>WIP: Implementing a typing box where user can type markdown text in realtime  </li>\n</ul>","frontmatter":{"title":"Markdown TO-DOs","date":"02 December, 2018","link":"https://simple-graphql.herokuapp.com/","tags":["apollo","graphql","axios","react"],"images":["apollo","graphql","react"]},"excerpt":"A basic application which started with learning GraphQL and is transforming as a TODOs app Query and view markdowns via graphQL backend  WIP…"}},{"node":{"id":"4c54db1d-adda-58b4-8ff0-9790cc9fcbb9","html":"<ul>\n<li>A basic application with server side rendering for ReactJS.</li>\n<li>Again using my favorite boilerplate, CRA.</li>\n</ul>","frontmatter":{"title":"Server Side Rendering","date":"17 June, 2018","link":"https://github.com/dixitk13/basic-react-server-side","tags":["react","styled-components","cra","reactdom"],"images":["react","styled-components","cra"]},"excerpt":"A basic application with server side rendering for ReactJS. Again using my favorite boilerplate, CRA."}},{"node":{"id":"46890a06-0a22-58ca-ac97-65356d41a164","html":"<ul>\n<li>Creating a custom service worker in a simple PWA(Progressive Web Application) just because, Steve Jobs dreamed of it long ago, its going to be the future!</li>\n<li>Its a React Application with a CRA boilerplate, ejected to enable writing custom service worker.</li>\n</ul>","frontmatter":{"title":"Service Workers in PWA","date":"21 August, 2017","link":"https://github.com/dixitk13/toggle-me","tags":["react","cra","pwa","service workers"],"images":["react","cra","pwa"]},"excerpt":"Creating a custom service worker in a simple PWA(Progressive Web Application) just because, Steve Jobs dreamed of it long ago, its going to…"}},{"node":{"id":"473c8a76-021a-5d77-a779-f421300e9a38","html":"<p>Personal project where I've implemented a few graph algorithms on a famous data set, Enron Data Set. </p>\n<ul>\n<li>\n<p>Algorithms viz.</p>\n<ul>\n<li>Freeman's Degree Centrality</li>\n<li>Closeness Centrality</li>\n<li>Farness Centrality</li>\n<li>Betweenness Centrality</li>\n<li>EigenVector Centrality - using JBLAS library</li>\n<li>Transitive Closure</li>\n<li>FloydWarshall's Algorithm</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Enron Social Graph","date":"26 November, 2015","link":"https://github.com/dixitk13/readmes.md/blob/master/personal-projects.md","tags":["graph","java","d3js","algorithms"],"images":["graph","java","d3js"]},"excerpt":"Personal project where I've implemented a few graph algorithms on a famous data set, Enron Data Set.  Algorithms viz. Freeman's Degree…"}},{"node":{"id":"a2c4415b-4667-594a-9212-18e4b1315be3","html":"<p>As an intern I was tasked with improving the operations and debugging experience with the core application of Genesys(Soundbite) at the center of the task.</p>\n<ul>\n<li>I designed a scalable data architecture using open-source software to collect logs generated via the application into a centralized logging system. The architecture comprised of Log-courier, Logstash, Elasticsearch &#x26; Kibana (ELK) with searchers, masters, data-nodes &#x26; indexers. The architecture was capable of ingesting 11,000 events per second.</li>\n<li>I've also customized Logstash filters in Ruby (JRuby), developed Perl &#x26; Java indexing modules to ingest synthesized data.</li>\n</ul>","frontmatter":{"title":"My Internship @ Genesys","date":"04 April, 2015","link":"https://www.linkedin.com/company/genesys/","tags":["logstash","linux","elasticsearch","kibana","genesys","logcourier"],"images":["logstash","linux","elasticsearch","kibana","genesys"]},"excerpt":"As an intern I was tasked with improving the operations and debugging experience with the core application of Genesys(Soundbite) at the…"}},{"node":{"id":"0bb68858-97ab-5667-8c96-6872ac8bfd56","html":"<ul>\n<li>I studied computer science at Northeastern University during the Fall '14 Semester.</li>\n<li>GPA ④</li>\n<li>I was also the teaching assistant for Information Retrieval for 3 terms.</li>\n<li>\n<p>I attended the following courses:</p>\n<ul>\n<li>Web Development</li>\n<li>Computer Systems</li>\n<li>Algorithms</li>\n<li>Natural Language Processing</li>\n<li>Information Retrieval</li>\n<li>Data Mining Techniques</li>\n<li>Parallel Data Processing with Map-Reduce</li>\n<li>Programming Design Paradigm</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"What I did @ Northeastern","date":"15 August, 2014","link":"https://www.khoury.northeastern.edu/program/computer-science-ms/","tags":["northeastern","cs","algorithms","datascience"],"images":["northeastern","hat","computerscience"]},"excerpt":"I studied computer science at Northeastern University during the Fall '14 Semester. GPA ④ I was also the teaching assistant for Information…"}},{"node":{"id":"b02920ad-d672-528d-88c5-b009d53e095c","html":"<p>I was an Application Developer for a J2EE application which dealt with “VPN automation” automating the entire VPN order processing till the step of provisioning.</p>\n<p>There's a lot one does in 3 years, so I'll mention a few highlights:</p>\n<ul>\n<li>Designed and developed a lot of web-services to integrate in the application.</li>\n<li>Reduced redundancy in code and number of database connections by implementing a Generic Database Service in Hibernate using JAX-WS framework &#x26; Java Reflections.</li>\n<li>Spearheaded the migration of Web Services &#x26; Web Applications from Tomcat 6.0 to Weblogic 12c.</li>\n</ul>","frontmatter":{"title":"What I did @ Infosys","date":"25 September, 2011","link":"https://www.infosys.com/","tags":["java","sql","hibernate","reflections","infosys","soa","jaxws"],"images":["java","sql","hibernate","reflections","infosys"]},"excerpt":"I was an Application Developer for a J2EE application which dealt with “VPN automation” automating the entire VPN order processing till the…"}}]}}}