(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{lXoy:function(n,e,a){"use strict";a.d(e,"d",(function(){return t.c})),a.d(e,"b",(function(){return t.b})),a.d(e,"e",(function(){return t.d})),a.d(e,"f",(function(){return t.e})),a.d(e,"c",(function(){return N})),a.d(e,"a",(function(){return x}));var t=a("LKM1"),s=(a("gMHT"),a("r/Xj")),o=a("q1tI"),m=a.n(o),d=a("Wbzz"),r=a("vOnD"),p=a("7Qib"),c=a("InJ6"),l=r.c.article.withConfig({displayName:"BlogPostsView__BlogItemArticle",componentId:"sc-107fu6g-0"})(["font-size:30px;padding:20px;border-radius:3px;transition:all 0.3s ease;cursor:pointer;width:100%;&:hover{transform:translateY(-2px);}&:active{transform:translateZ(-12px);}p{font-size:18px;}"]),i=Object(r.c)(t.a).withConfig({displayName:"BlogPostsView__PostHeading",componentId:"sc-107fu6g-1"})(["margin:20px 0 10px 0;display:flex;justify-content:space-between;a{margin:0;padding:0;font-weight:900;font-size:40px;color:",';text-decoration:none;font-family:"Futura PT",-apple-system,sans-serif;&:hover{color:',";cursor:pointer;}}p{margin:0;}small{font-size:18px;}@media ","{min-height:unset;a{font-weight:900;font-size:27px;}}"],c.h,c.i,p.a.mobile),u=function(n){var e=n.blogs;return e?m.a.createElement(t.b,null,e&&e.map((function(n,e){var a=n.node,t=a.frontmatter,s=a.excerpt,o=a.id;return m.a.createElement(x,{id:o,key:"blog-item-"+e,date:t.date,excerpt:s,title:t.title,path:t.path})}))):null},x=function(n){var e=n.id,a=n.path,t=n.title,s=n.date,o=n.excerpt;return m.a.createElement(l,{key:"small-blog-item-"+e},m.a.createElement(i,{as:"header"},m.a.createElement(d.Link,{to:""+a},t),m.a.createElement("p",null,s)),m.a.createElement("p",null,o))},N=function(){return m.a.createElement(d.StaticQuery,{query:"3855240819",render:function(n){var e=n.blogs;return m.a.createElement(u,{blogs:e.edges})},data:s})}},"r/Xj":function(n){n.exports=JSON.parse('{"data":{"blogs":{"edges":[{"node":{"id":"db22495a-8172-57dd-856b-4b54dee1f209","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\\n\\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\\n\\n/* @jsx mdx */\\nvar _frontmatter = {\\n  \\"title\\": \\"Draft pull requests\\",\\n  \\"date\\": \\"2020-05-10\\",\\n  \\"path\\": \\"/draft-pull-requests\\",\\n  \\"type\\": \\"blog\\",\\n  \\"tags\\": [\\"process\\", \\"github\\"]\\n};\\n\\nvar makeShortcode = function makeShortcode(name) {\\n  return function MDXDefaultShortcode(props) {\\n    console.warn(\\"Component \\" + name + \\" was not imported, exported, or provided by MDXProvider as global scope\\");\\n    return mdx(\\"div\\", props);\\n  };\\n};\\n\\nvar layoutProps = {\\n  _frontmatter: _frontmatter\\n};\\nvar MDXLayout = \\"wrapper\\";\\nreturn function MDXContent(_ref) {\\n  var components = _ref.components,\\n      props = _objectWithoutProperties(_ref, [\\"components\\"]);\\n\\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\\n    components: components,\\n    mdxType: \\"MDXLayout\\"\\n  }), mdx(\\"p\\", null, \\"I believe in making small pull requests and they can be either of features, bug fixes, changes/updates and improvements.\\"), mdx(\\"p\\", null, \\"I\\\\u2019ve always felt that need to entitle my PR\\\\u2019s with:\\"), mdx(\\"ul\\", null, mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"p\\", {\\n    parentName: \\"li\\"\\n  }, \\"[DO-NOT-MERGE]\\", \\":\\"), mdx(\\"ul\\", {\\n    parentName: \\"li\\"\\n  }, mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, \\"When i need to show it to my folks and get opinions or ideas and not having to send it out in an email/slack message.\\"), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, \\"Or when I need to get it reviewed from other managers out there if the behavior is finally what they asked for.\\"), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, \\"Or I need a build out prod version of my code\\"))), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"p\\", {\\n    parentName: \\"li\\"\\n  }, \\"[NEEDS-TESTING]\\", \\": when I\\\\u2019ve finished writing the code:\\"), mdx(\\"ul\\", {\\n    parentName: \\"li\\"\\n  }, mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, \\"but its 12am\\"), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, \\"or maybe my codebase lacks e2e for all the other code surrounding mine.\\\\nP.S: lets face it guys not everyone has strong e2e and pushes at 12 am, sets to auto-complete and sleeps the night.\\")))), mdx(\\"p\\", null, \\"[DRAFT]\\", \\" is my rescuer here where any teammate isn\\\\u2019t going to click merge/approve and call it a day but is definately going to have a look to leave out comments to chime and continue the discussions\\"), mdx(\\"p\\", null, \\"Ref: \\", mdx(\\"a\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"href\\": \\"https://github.blog/2019-02-14-introducing-draft-pull-requests/\\",\\n    \\"rel\\": \\"nofollow noopener noreferrer external\\"\\n  }), \\"https://github.blog/2019-02-14-introducing-draft-pull-requests/\\")), mdx(\\"h2\\", {\\n    \\"id\\": \\"What-I-follow-as-nomenclature-for-Pull-Requests\\",\\n    \\"style\\": {\\n      \\"position\\": \\"relative\\"\\n    }\\n  }, mdx(\\"a\\", _extends({\\n    parentName: \\"h2\\"\\n  }, {\\n    \\"href\\": \\"#What-I-follow-as-nomenclature-for-Pull-Requests\\",\\n    \\"aria-label\\": \\"What I follow as nomenclature for Pull Requests permalink\\",\\n    \\"className\\": \\"auto-link-header-class before\\"\\n  }), mdx(\\"svg\\", _extends({\\n    parentName: \\"a\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"height\\": \\"20\\",\\n    \\"version\\": \\"1.1\\",\\n    \\"viewBox\\": \\"0 0 16 16\\",\\n    \\"width\\": \\"20\\"\\n  }), mdx(\\"path\\", _extends({\\n    parentName: \\"svg\\"\\n  }, {\\n    \\"fillRule\\": \\"evenodd\\",\\n    \\"d\\": \\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"\\n  })))), \\"What I follow as nomenclature for Pull Requests:\\"), mdx(\\"p\\", null, \\"Most of my PR\\\\u2019s follow a nomenclature for branch naming as well, call me victim of OCD but that\\\\u2019s me!\\"), mdx(\\"ul\\", null, mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"<username>/hotfix/<branch-code-name>\\"), \\" : for hot-fixes of course\\"), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"<username>/changes/<branch-code-name>\\"), \\" : for changes/improvements\\"), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"<username>/feature/<branch-code-name>\\"), \\": for feature updates\\")), mdx(\\"p\\", null, \\"where branch code name is an at-most 3 letter word for what the branch is doing. I try not to name them like with prefix of an issue number since I am bad with numbers, but if you are that\\\\u2019s the best way to do your nomenclature TBH.\\"), mdx(\\"p\\", null, \\"I usually try to keep my commit messages short, so its readable in single line - about 50 or less should do it. If you\\\\u2019d like to write more text, after the 50 lines a new line should be added and rest of the text should be wrapped at 72 lines-ish.\\"), mdx(\\"p\\", null, \\"A good read about how I adopted the above \\", mdx(\\"a\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"href\\": \\"https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\\",\\n    \\"rel\\": \\"nofollow noopener noreferrer external\\"\\n  }), \\"here\\")), mdx(\\"p\\", null, \\"Some argue making the commit message like a summary helps them the below for sending (nicely formatted emails)\\", \\"[https://thoughtbot.com/blog/send-a-patch-to-someone-using-git-format-patch]\\", \\", but meh - email\\\\u2019s not going to live long hopefully.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"bash\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"className\\": \\"language-bash\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-bash\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"git\\"), \\" format-patch \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"<\\"), \\"branch\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\">\\"), \\" --stdout\\"))), mdx(\\"p\\", null, \\"Adopt \\", mdx(\\"strong\\", {\\n    parentName: \\"p\\"\\n  }, \\"rebase\\"), \\". It seems to keep the history clean, coming from the \\", mdx(\\"strong\\", {\\n    parentName: \\"p\\"\\n  }, \\"merge\\"), \\" guy who used merge for several years now :)\\"));\\n}\\n;\\nMDXContent.isMDXComponent = true;","frontmatter":{"path":"/draft-pull-requests","type":"blog","date":"May 10, 2020","title":"Draft pull requests"},"excerpt":"I believe in making small pull requests and they can be either of features, bug fixes, changes/updates and improvements. I\'ve always felt t…"}},{"node":{"id":"faa1c02e-c1f1-584b-9502-2f30d099eb85","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\\n\\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\\n\\n/* @jsx mdx */\\nvar _frontmatter = {\\n  \\"title\\": \\"Typescript discriminator\\",\\n  \\"date\\": \\"2020-04-10\\",\\n  \\"path\\": \\"/typescript-discriminator\\",\\n  \\"type\\": \\"blog\\",\\n  \\"tags\\": [\\"react\\", \\"typescript\\"]\\n};\\n\\nvar makeShortcode = function makeShortcode(name) {\\n  return function MDXDefaultShortcode(props) {\\n    console.warn(\\"Component \\" + name + \\" was not imported, exported, or provided by MDXProvider as global scope\\");\\n    return mdx(\\"div\\", props);\\n  };\\n};\\n\\nvar layoutProps = {\\n  _frontmatter: _frontmatter\\n};\\nvar MDXLayout = \\"wrapper\\";\\nreturn function MDXContent(_ref) {\\n  var components = _ref.components,\\n      props = _objectWithoutProperties(_ref, [\\"components\\"]);\\n\\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\\n    components: components,\\n    mdxType: \\"MDXLayout\\"\\n  }), mdx(\\"p\\", null, \\"Very often we have use-cases where we would like to use a single type \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"Union Type\\"), \\" but still be sure about the properties inside them.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"tsx\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"className\\": \\"language-tsx\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-tsx\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"interface\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"Employee\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  name\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"string\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  salary\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"number\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"interface\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"HumanResource\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  name\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"string\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  power\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"boolean\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"let\\"), \\" person\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" Employee \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"|\\"), \\" HumanResource\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\")))), mdx(\\"p\\", null, \\"But under the hood Typescript union\\\\u2019s are more of \\\\u201Ccommon\\\\u201D properties inside them instead of \\\\u201Chaving all the properties\\\\u201D.\\"), mdx(\\"p\\", null, \\"So when you try and use it like:\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"tsx\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"className\\": \\"language-tsx\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-tsx\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"let\\"), \\" helloPerson \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"person\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" Employee \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"|\\"), \\" HumanResource\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"void\\")), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n   \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"person\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"<\\"), \\"only has properties common to Employee \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"&\\"), \\" HumanResource aka name\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\">\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\")))), mdx(\\"p\\", null, \\"where as you would expect person to have \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"{name, salary}\\"), \\" or \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"{name, power}\\"), \\" and choose between them depending on what person is.\\"), mdx(\\"p\\", null, \\"This is where discriminators come in power-play. Bear with my variable nomenclature:\\"), mdx(\\"p\\", null, \\"Lets define an enum to contain both the use-cases of Person\\\\u2019s we have, calling it \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"PersonType\\"), \\" and then define a type combining \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"HumanResource\\"), \\" and \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"Employee\\"), \\".\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"tsx\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"className\\": \\"language-tsx\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-tsx\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"enum\\"), \\" PersonType \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"EMPLOYEE\\\\\\"\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"HR\\\\\\"\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"interface\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"Employee\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  name\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"string\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"type\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" PersonType\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"EMPLOYEE\\"), \\"\\\\n\\\\tsalary\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"number\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"interface\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"HumanResource\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  name\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"string\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"type\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" PersonType\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"HR\\"), \\"\\\\n  power\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"boolean\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"type\\"), \\" Person \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" HumanResource \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"|\\"), \\" Employee\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"let\\"), \\" person\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" Employee \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"|\\"), \\" HumanResource\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"let\\"), \\" helloPerson \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"person\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" Person\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"void\\")), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"switch\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"person\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"type\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"case\\"), \\" PersonType\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"EMPLOYEE\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\"\\\\n      \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// this gives you both name/salary since now TS understands\\"), \\"\\\\n      \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// and discriminates between the two types you have\\"), \\"\\\\n      \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"person\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"gives you name\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" salary\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\")))));\\n}\\n;\\nMDXContent.isMDXComponent = true;","frontmatter":{"path":"/typescript-discriminator","type":"blog","date":"Apr 10, 2020","title":"Typescript discriminator"},"excerpt":"Very often we have use-cases where we would like to use a single type  Union Type  but still be sure about the properties inside them. But …"}},{"node":{"id":"1e03d293-929b-5408-a5d7-a8abddde4f9e","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\\n\\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\\n\\n/* @jsx mdx */\\nvar _frontmatter = {\\n  \\"title\\": \\"Simple countdown timer\\",\\n  \\"date\\": \\"2019-04-24\\",\\n  \\"path\\": \\"/simple-count-downtimer\\",\\n  \\"type\\": \\"blog\\",\\n  \\"tags\\": [\\"react\\", \\"javascript\\"]\\n};\\n\\nvar makeShortcode = function makeShortcode(name) {\\n  return function MDXDefaultShortcode(props) {\\n    console.warn(\\"Component \\" + name + \\" was not imported, exported, or provided by MDXProvider as global scope\\");\\n    return mdx(\\"div\\", props);\\n  };\\n};\\n\\nvar layoutProps = {\\n  _frontmatter: _frontmatter\\n};\\nvar MDXLayout = \\"wrapper\\";\\nreturn function MDXContent(_ref) {\\n  var components = _ref.components,\\n      props = _objectWithoutProperties(_ref, [\\"components\\"]);\\n\\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\\n    components: components,\\n    mdxType: \\"MDXLayout\\"\\n  }), mdx(\\"p\\", null, \\"I was recently trying to make a simple countdown timer which counts from a specific time-interval and \\\\u201Cfinishes\\\\u201D itself.\\"), mdx(\\"p\\", null, \\"I just found it amazing that a few lines of code could bring in such a thing!\\\\nthe code just uses a state called \\\\u201Cminutes\\\\u201D which gets initialized with the total number of seconds for which the timer stays.\\"), mdx(\\"p\\", null, \\"The component accepts minutes till which it must stay alive, converts that into seconds, runs the countdown and then clears the internal logic.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"jsx\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"className\\": \\"language-jsx\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-jsx\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"<\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"Timer\\")), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token attr-name\\"\\n  }), \\"classNames\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token attr-value\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"=\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"\\\\\\"\\"), \\"time-text\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"\\\\\\"\\")), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token attr-name\\"\\n  }), \\"minutes\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token script language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token script-punctuation punctuation\\"\\n  }), \\"=\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"Number\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"10\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\")), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"/>\\"))))), mdx(\\"p\\", null, \\"And here\\\\u2019s the entire code.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"jsx\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"className\\": \\"language-jsx\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-jsx\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"import\\"), \\" React\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" Fragment\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" useState\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" useEffect \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"from\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"react\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function-variable function\\"\\n  }), \\"Timer\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" minutes\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" classNames \\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"if\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"!\\"), \\"minutes\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"null\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), \\"seconds\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" setSeconds\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"useState\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"minutes \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"*\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"60\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"useEffect\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"let\\"), \\" timeout \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"setInterval\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n      \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"setSeconds\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"seconds \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"-\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1000\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"if\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"seconds \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"<\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n      \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"clearTimeout\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"timeout\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n      \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"clearInterval\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"timeout\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), \\"seconds\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" showMins \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" Math\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"floor\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"seconds \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"/\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"60\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" showSeconds \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" seconds \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"%\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"60\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function-variable function\\"\\n  }), \\"PadString\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" number \\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"String\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"number\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"padStart\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"0\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"if\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"!\\"), \\"showMins \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"&&\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"!\\"), \\"showSeconds\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"||\\"), \\" showMins \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"<\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"<\\"), \\"span\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token attr-name\\"\\n  }), \\"className\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token script language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token script-punctuation punctuation\\"\\n  }), \\"=\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"classNames\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\">\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token plain-text\\"\\n  }), \\"Complete!\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"</\\"), \\"span\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\">\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"<\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"Fragment\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\">\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token plain-text\\"\\n  }), \\"\\\\n      \\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"<\\"), \\"span\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token attr-name\\"\\n  }), \\"className\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token script language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token script-punctuation punctuation\\"\\n  }), \\"=\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"classNames\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\">\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token plain-text\\"\\n  }), \\"\\\\n        \\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"<\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"PadString\\")), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token attr-name\\"\\n  }), \\"number\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token script language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token script-punctuation punctuation\\"\\n  }), \\"=\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"showMins\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\")), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"/>\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token plain-text\\"\\n  }), \\":\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"<\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"PadString\\")), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token attr-name\\"\\n  }), \\"number\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token script language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token script-punctuation punctuation\\"\\n  }), \\"=\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"showSeconds\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\")), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"/>\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token plain-text\\"\\n  }), \\"\\\\n      \\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"</\\"), \\"span\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\">\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\" \\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token plain-text\\"\\n  }), \\"\\\\n      remaining\\\\n    \\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"</\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"Fragment\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\">\\")), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"export\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"default\\"), \\" Timer\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\")))), mdx(\\"p\\", null, mdx(\\"img\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"src\\": \\"/blog/simple-count-downtimer/count-down-timer.gif\\",\\n    \\"alt\\": \\"count-down-timer\\"\\n  }))), mdx(\\"p\\", null, \\"And below\\\\u2019s a codepen link:\\"), mdx(\\"p\\", null, mdx(\\"a\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"href\\": \\"https://codepen.io/dixitk13/pen/WNQPKye\\",\\n    \\"rel\\": \\"nofollow noopener noreferrer external\\"\\n  }), \\"https://codepen.io/dixitk13/pen/WNQPKye\\")));\\n}\\n;\\nMDXContent.isMDXComponent = true;","frontmatter":{"path":"/simple-count-downtimer","type":"blog","date":"Apr 24, 2019","title":"Simple countdown timer"},"excerpt":"I was recently trying to make a simple countdown timer which counts from a specific time-interval and “finishes” itself. I just found it am…"}},{"node":{"id":"8d6b2788-85d7-5224-a1b4-1feef482b145","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\\n\\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\\n\\n/* @jsx mdx */\\nvar _frontmatter = {\\n  \\"title\\": \\"One liner chats?\\",\\n  \\"date\\": \\"2019-01-10\\",\\n  \\"path\\": \\"/one-liner-chats\\",\\n  \\"type\\": \\"blog\\",\\n  \\"tags\\": [\\"communication\\", \\"chat\\"]\\n};\\n\\nvar makeShortcode = function makeShortcode(name) {\\n  return function MDXDefaultShortcode(props) {\\n    console.warn(\\"Component \\" + name + \\" was not imported, exported, or provided by MDXProvider as global scope\\");\\n    return mdx(\\"div\\", props);\\n  };\\n};\\n\\nvar layoutProps = {\\n  _frontmatter: _frontmatter\\n};\\nvar MDXLayout = \\"wrapper\\";\\nreturn function MDXContent(_ref) {\\n  var components = _ref.components,\\n      props = _objectWithoutProperties(_ref, [\\"components\\"]);\\n\\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\\n    components: components,\\n    mdxType: \\"MDXLayout\\"\\n  }), mdx(\\"p\\", null, \\"The entire world is hooked on messaging and being connected digitally.\\\\nOur world revolves around notifications and checking them or needing to check them due to on-call duties or maybe you are just the kind of person who replies to chats instantly.\\"), mdx(\\"p\\", null, \\"The notification sound of iMessage is just iconic or has become iconic. But do multiple notifications irritate you?\\"), mdx(\\"p\\", null, \\"Do you get irritated by 5 notifications grouped under the same application by a single friend of yours?\\"), mdx(\\"h2\\", {\\n    \\"id\\": \\"Scenario-1\\",\\n    \\"style\\": {\\n      \\"position\\": \\"relative\\"\\n    }\\n  }, mdx(\\"a\\", _extends({\\n    parentName: \\"h2\\"\\n  }, {\\n    \\"href\\": \\"#Scenario-1\\",\\n    \\"aria-label\\": \\"Scenario 1 permalink\\",\\n    \\"className\\": \\"auto-link-header-class before\\"\\n  }), mdx(\\"svg\\", _extends({\\n    parentName: \\"a\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"height\\": \\"20\\",\\n    \\"version\\": \\"1.1\\",\\n    \\"viewBox\\": \\"0 0 16 16\\",\\n    \\"width\\": \\"20\\"\\n  }), mdx(\\"path\\", _extends({\\n    parentName: \\"svg\\"\\n  }, {\\n    \\"fillRule\\": \\"evenodd\\",\\n    \\"d\\": \\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"\\n  })))), \\"Scenario 1\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"text\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"[10:15 AM] John Parker: Hi Dixit\\\\n[10:15 AM] John Parker: About that PR\\\\n[10:16 AM] John Parker: Did you get a chance to look at it\\\\n[10:16 AM] John Parker: ?\\\\n[10:17 AM] John Parker: Its just a small change from the ticket TKT-123\\\\n[10:17 AM] John Parker: Here\'s a link for the same\\\\n[10:18 AM] John Parker: https://github.com/TKT/pulls/321\\\\n[10:20 AM] Dixit Patel: Nope, totally forgot. Lemme do it right away!\\\\n[10:25 AM] John Parker: Also, that PR doesn\'t fix 123 completely,\\\\n[10:25 AM] John Parker: its a sub-task\\\\n[10:25 AM] John Parker: jira stuff you know ...\\\\n[10:26 AM] John Parker: but boss signed off\\\\n[10:26 AM] John Parker: gotta ship it\\\\n[10:30 AM] Dixit Patel: Right, on it.\\"))), mdx(\\"blockquote\\", null, mdx(\\"p\\", {\\n    parentName: \\"blockquote\\"\\n  }, \\"I do! There, I said it! \\\\uD83D\\\\uDE48\\")), mdx(\\"p\\", null, \\"Most of people in this world might have used one or another form of chat/messaging\\\\nlike iMessage, Jabber, Slack, Teams, etc. Today, at most workplaces messaging is an essential part of communication for most people working w/ each other.\\"), mdx(\\"p\\", null, \\"Software engineers all have a habit of writing code and\\\\nusing the most popular version control to manage their code called GIT.\\"), mdx(\\"p\\", null, \\"Can you follow that with your chats? - Absolutely!\\"), mdx(\\"p\\", null, \\"Here\\\\u2019s what I do, or rather how my pings look like:\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"text\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"[10:15 AM] Dixit: Hi John, about that PR, did you get a\\\\nchance to look at it? Its just a small change from the\\\\nticket TKT-123. Here\'s a link for the same:\\\\nhttps://github.com/TKT/pulls/321\\"))), mdx(\\"p\\", null, \\"Further on if John wants to say \\\\u201CHe\\\\u2019s looking at it\\\\u201D, he either reacts with\\\\nan \\\\u201CACK\\\\u201D reaction/emoji on the same message or says in a straight one liner,\\\\nand the conversation could maybe be something like:\\"), mdx(\\"h2\\", {\\n    \\"id\\": \\"Scenario-2\\",\\n    \\"style\\": {\\n      \\"position\\": \\"relative\\"\\n    }\\n  }, mdx(\\"a\\", _extends({\\n    parentName: \\"h2\\"\\n  }, {\\n    \\"href\\": \\"#Scenario-2\\",\\n    \\"aria-label\\": \\"Scenario 2 permalink\\",\\n    \\"className\\": \\"auto-link-header-class before\\"\\n  }), mdx(\\"svg\\", _extends({\\n    parentName: \\"a\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"height\\": \\"20\\",\\n    \\"version\\": \\"1.1\\",\\n    \\"viewBox\\": \\"0 0 16 16\\",\\n    \\"width\\": \\"20\\"\\n  }), mdx(\\"path\\", _extends({\\n    parentName: \\"svg\\"\\n  }, {\\n    \\"fillRule\\": \\"evenodd\\",\\n    \\"d\\": \\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"\\n  })))), \\"Scenario 2\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"text\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"[10:15 AM] Dixit Patel: Hi John, about that PR, did you get a\\\\nchance to look at it? Its just a small change from the\\\\nticket TKT-123. Here\'s a link for the same:\\\\nhttps://github.com/TKT/pulls/321 <\\\\uD83D\\\\uDC4C>\\\\n\\\\n[10:16 AM] John Parker: Nah, I didn\'t get a chance mate.\\\\nLemme do that right away.\\\\n\\\\n[10:17 AM] Dixit Patel: Also, that PR doesn\'t completely fix TKT-123, but\\\\nattempts a sub-task for it. Boss says ship it and complete the TKT-123\\\\nlater in the day.\\\\n\\\\n[10:18 AM] John Parker: Right, on it. Also The TKT-331 kinda\\\\nneeds some priority. Seems to me like its breaking on\\\\nChrome 83 due to downloads being blocked in iframe,\\\\nbefore customers report. Should be a small fix.\\"))), mdx(\\"p\\", null, \\"Now one would ask, what does this benefit me with?\\"), mdx(\\"p\\", null, \\"Well, I\\\\u2019ll say why maintain commit history with 52th word mark and wrap the rest of the commit message at 72th word mark?\\"), mdx(\\"h2\\", {\\n    \\"id\\": \\"-HISTORY-\\",\\n    \\"style\\": {\\n      \\"position\\": \\"relative\\"\\n    }\\n  }, mdx(\\"a\\", _extends({\\n    parentName: \\"h2\\"\\n  }, {\\n    \\"href\\": \\"#-HISTORY-\\",\\n    \\"aria-label\\": \\" HISTORY  permalink\\",\\n    \\"className\\": \\"auto-link-header-class before\\"\\n  }), mdx(\\"svg\\", _extends({\\n    parentName: \\"a\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"height\\": \\"20\\",\\n    \\"version\\": \\"1.1\\",\\n    \\"viewBox\\": \\"0 0 16 16\\",\\n    \\"width\\": \\"20\\"\\n  }), mdx(\\"path\\", _extends({\\n    parentName: \\"svg\\"\\n  }, {\\n    \\"fillRule\\": \\"evenodd\\",\\n    \\"d\\": \\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"\\n  })))), \\"\\\\uD83D\\\\uDCDC HISTORY \\\\uD83D\\\\uDCDC\\"), mdx(\\"p\\", null, \\"Its\\\\u2019s a powerful thing. Commit history is a very important thing!\\\\nIt helps understand the how the code has been developing and what churn has\\\\nbeen happening in the codebase, etc etc.\\"), mdx(\\"p\\", null, \\"To me scenario 1 looks like a commit history which is shown below:\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"text\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"* 5d53d5a - complete\\\\n* 3b97cf3 - wip\\\\n* 8c2e4b8 - pull from master\\\\n* 4407227 - boss called wip\\\\n* 70cdc42 - typo\\\\n* 329f368 - fix padding/margin\\\\n* 18007ad - #ABC321 in progress\\"))), mdx(\\"p\\", null, \\"Where as the scenario 2 looks like:\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"text\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"* 6e53924 - Fix TKT-333 bug found via review w/ @jparker\\\\n* 844b34c - Fix TKT-331 chrome 83 iframe download\\\\n* 57152ff - Feat TKT-322 allowing i18n for only the menus\\"))), mdx(\\"p\\", null, \\"Which one do you like more? Retrospection is the key, scroll two pages up and\\\\nyou\\\\u2019ll have conversations which kinda helps remember the status of things.\\"), mdx(\\"p\\", null, \\"Use threads.\\\\nThreads will let you condense/group those conversations into singular items.\\"), mdx(\\"p\\", null, \\"Together we can make \\\\u201Cchat-history-great\\\\u201D!\\\\uD83C\\\\uDF7B\\"));\\n}\\n;\\nMDXContent.isMDXComponent = true;","frontmatter":{"path":"/one-liner-chats","type":"blog","date":"Jan 10, 2019","title":"One liner chats?"},"excerpt":"The entire world is hooked on messaging and being connected digitally.\\nOur world revolves around notifications and checking them or needing…"}}],"totalCount":4}}}')}}]);
//# sourceMappingURL=c5c6ea59f6063ae1f43365f7c25313b02f1478ff-efe4bd73a63d42186fbc.js.map