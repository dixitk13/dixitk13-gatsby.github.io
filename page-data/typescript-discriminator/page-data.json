{"componentChunkName":"component---src-components-blog-blog-post-template-blog-post-template-js","path":"/typescript-discriminator","result":{"data":{"markdownRemark":{"id":"a8274742-fd3c-5b0c-bd21-4b0a3f9b49c5","frontmatter":{"title":"Typescript discriminator","type":"blog","date":"Apr 10, 2020"},"timeToRead":1,"html":"<p>Very often we have use-cases where we would like to use a single type <code>Union Type</code> but still be sure about the properties inside them.</p>\n<pre><code class=\"language-{javascript}\">interface Employee {\n  name: string;\n    salary: number;\n}\n\ninterface HumanResource {\n  name: string;\n  power: boolean;\n}\n\nlet person: Employee | HumanResource;\n</code></pre>\n<p>But under the hood Typescript union's are more of \"common\" properties inside them instead of \"having all the properties\".</p>\n<p>So when you try and use it like:</p>\n<pre><code class=\"language-{javascript}\">let helloPerson = (person: Employee | HumanResource): void => {\n   console.log(person.&#x3C;only has properties common to Employee &#x26; HumanResource aka name>);\n}\n</code></pre>\n<p>where as you would expect person to have <code>{name, salary}</code> or <code>{name, power}</code> and choose between them depending on what person is.</p>\n<p>This is where discriminators come in power-play. Bear with my variable nomenclature:</p>\n<p>Lets define an enum to contain both the use-cases of Person's we have, calling it <code>PersonType</code> and then define a type combining <code>HumanResource</code> and <code>Employee</code>.</p>\n<pre><code class=\"language-{javascript}\">enum PersonType { \"EMPLOYEE\" , \"HR\" }\n\ninterface Employee {\n  name: string;\n  type: PersonType.EMPLOYEE\n    salary: number;\n}\n\ninterface HumanResource {\n  name: string;\n  type: PersonType.HR\n  power: boolean;\n}\n\ntype Person = HumanResource | Employee;\n\nlet person: Employee | HumanResource;\n\nlet helloPerson = (person: Person): void => {\n  switch(person.type) {\n    case PersonType.EMPLOYEE:\n      // this gives you both name/salary since now TS understands\n      // and discriminates between the two types you have\n      console.log(person.{gives you name, salary});\n  }\n}\n</code></pre>"}},"pageContext":{}}}