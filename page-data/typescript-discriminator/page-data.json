{"componentChunkName":"component---src-components-blog-blog-post-template-blog-post-template-js","path":"/typescript-discriminator","result":{"data":{"markdownRemark":{"id":"a8274742-fd3c-5b0c-bd21-4b0a3f9b49c5","frontmatter":{"title":"Typescript discriminator","type":"blog","date":"Apr 10, 2020"},"timeToRead":1,"html":"<p>Very often we have use-cases where we would like to use a single type <code class=\"language-text\">Union Type</code> but still be sure about the properties inside them.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  salary<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">HumanResource</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  power<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> person<span class=\"token operator\">:</span> Employee <span class=\"token operator\">|</span> HumanResource<span class=\"token punctuation\">;</span></code></pre></div>\n<p>But under the hood Typescript union's are more of \"common\" properties inside them instead of \"having all the properties\".</p>\n<p>So when you try and use it like:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">let</span> helloPerson <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>person<span class=\"token operator\">:</span> Employee <span class=\"token operator\">|</span> HumanResource<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\"><span class=\"token keyword\">void</span></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>only has properties common to Employee <span class=\"token operator\">&amp;</span> HumanResource aka name<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>where as you would expect person to have <code class=\"language-text\">{name, salary}</code> or <code class=\"language-text\">{name, power}</code> and choose between them depending on what person is.</p>\n<p>This is where discriminators come in power-play. Bear with my variable nomenclature:</p>\n<p>Lets define an enum to contain both the use-cases of Person's we have, calling it <code class=\"language-text\">PersonType</code> and then define a type combining <code class=\"language-text\">HumanResource</code> and <code class=\"language-text\">Employee</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">enum</span> PersonType <span class=\"token punctuation\">{</span> <span class=\"token string\">\"EMPLOYEE\"</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"HR\"</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Employee</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> PersonType<span class=\"token punctuation\">.</span><span class=\"token constant\">EMPLOYEE</span>\n\tsalary<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">HumanResource</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> PersonType<span class=\"token punctuation\">.</span><span class=\"token constant\">HR</span>\n  power<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> Person <span class=\"token operator\">=</span> HumanResource <span class=\"token operator\">|</span> Employee<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> person<span class=\"token operator\">:</span> Employee <span class=\"token operator\">|</span> HumanResource<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> helloPerson <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>person<span class=\"token operator\">:</span> Person<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\"><span class=\"token keyword\">void</span></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> PersonType<span class=\"token punctuation\">.</span><span class=\"token constant\">EMPLOYEE</span><span class=\"token operator\">:</span>\n      <span class=\"token comment\">// this gives you both name/salary since now TS understands</span>\n      <span class=\"token comment\">// and discriminates between the two types you have</span>\n      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span>gives you name<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}},"pageContext":{}}}