(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{E53F:function(e){e.exports=JSON.parse('{"data":{"blogs":{"edges":[{"node":{"id":"596d991f-212b-56c4-8a74-c501d64fa4bc","html":"<p>I believe in making small pull requests and they can be either of features, bug fixes, changes/updates and improvements.</p>\\n<p>I\'ve always felt that need to entitle my PR\'s with:</p>\\n<ul>\\n<li>\\n<p><code>[DO-NOT-MERGE]</code>:</p>\\n<ul>\\n<li>When i need to show it to my folks and get opinions or ideas and not having to send it out in an email/slack message.</li>\\n<li>Or when I need to get it reviewed from other managers out there if the behavior is finally what they asked for.</li>\\n<li>Or I need a build out prod version of my code</li>\\n</ul>\\n</li>\\n<li>\\n<p><code>[NEEDS-TESTING]</code>: when I\'ve finished writing the code:</p>\\n<ul>\\n<li>but its 12am</li>\\n<li>or maybe my codebase lacks e2e for all the other code surrounding mine.\\nP.S: lets face it guys not everyone has strong e2e and pushes at 12 am, sets to auto-complete and sleeps the night.</li>\\n</ul>\\n</li>\\n</ul>\\n<p><code>[DRAFT]</code> is my rescuer here where any teammate isn\'t going to click merge/approve and call it a day but is definately going to have a look to leave out comments to chime and continue the discussions</p>\\n<p>Ref: <a href=\\"https://github.blog/2019-02-14-introducing-draft-pull-requests/\\">https://github.blog/2019-02-14-introducing-draft-pull-requests/</a></p>\\n<h2>What I follow as nomenclature for Pull Requests:</h2>\\n<p>Most of my PR\'s follow a nomenclature for branch naming as well, call me victim of OCD but that\'s me!</p>\\n<ul>\\n<li><code>&#x3C;username>/hotfix/&#x3C;branch-code-name></code> : for hot-fixes of course</li>\\n<li><code>&#x3C;username>/changes/&#x3C;branch-code-name></code> : for changes/improvements</li>\\n<li><code>&#x3C;username>/feature/&#x3C;branch-code-name></code>: for feature updates</li>\\n</ul>\\n<p>where branch code name is an at-most 3 letter word for what the branch is doing. I try not to name them like with prefix of an issue number since I am bad with numbers, but if you are that\'s the best way to do your nomenclature TBH.</p>\\n<p>I usually try to keep my commit messages short, so its readable in single line - about 50 or less should do it. If you\'d like to write more text, after the 50 lines a new line should be added and rest of the text should be wrapped at 72 lines-ish.</p>\\n<p>A good read about how I adopted the above <a href=\\"https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\\">here</a></p>\\n<p>Some argue making the commit message like a summary helps them the below for sending (nicely formatted emails)[https://thoughtbot.com/blog/send-a-patch-to-someone-using-git-format-patch], but meh - email\'s not going to live long hopefully.</p>\\n<pre><code>git format-patch &#x3C;branch> --stdout\\n</code></pre>\\n<p>Adopt <strong>rebase</strong>. It seems to keep the history clean, coming from the <strong>merge</strong> guy who used merge for several years now :)</p>","frontmatter":{"path":"/draft-pull-requests","type":"blog","date":"May 10, 2020","title":"Draft pull requests"},"excerpt":"I believe in making small pull requests and they can be either of features, bug fixes, changes/updates and improvements. I\'ve always felt t…"}},{"node":{"id":"a8274742-fd3c-5b0c-bd21-4b0a3f9b49c5","html":"<p>Very often we have use-cases where we would like to use a single type <code>Union Type</code> but still be sure about the properties inside them.</p>\\n<pre><code class=\\"language-{javascript}\\">interface Employee {\\n  name: string;\\n    salary: number;\\n}\\n\\ninterface HumanResource {\\n  name: string;\\n  power: boolean;\\n}\\n\\nlet person: Employee | HumanResource;\\n</code></pre>\\n<p>But under the hood Typescript union\'s are more of \\"common\\" properties inside them instead of \\"having all the properties\\".</p>\\n<p>So when you try and use it like:</p>\\n<pre><code class=\\"language-{javascript}\\">let helloPerson = (person: Employee | HumanResource): void => {\\n   console.log(person.&#x3C;only has properties common to Employee &#x26; HumanResource aka name>);\\n}\\n</code></pre>\\n<p>where as you would expect person to have <code>{name, salary}</code> or <code>{name, power}</code> and choose between them depending on what person is.</p>\\n<p>This is where discriminators come in power-play. Bear with my variable nomenclature:</p>\\n<p>Lets define an enum to contain both the use-cases of Person\'s we have, calling it <code>PersonType</code> and then define a type combining <code>HumanResource</code> and <code>Employee</code>.</p>\\n<pre><code class=\\"language-{javascript}\\">enum PersonType { \\"EMPLOYEE\\" , \\"HR\\" }\\n\\ninterface Employee {\\n  name: string;\\n  type: PersonType.EMPLOYEE\\n    salary: number;\\n}\\n\\ninterface HumanResource {\\n  name: string;\\n  type: PersonType.HR\\n  power: boolean;\\n}\\n\\ntype Person = HumanResource | Employee;\\n\\nlet person: Employee | HumanResource;\\n\\nlet helloPerson = (person: Person): void => {\\n  switch(person.type) {\\n    case PersonType.EMPLOYEE:\\n      // this gives you both name/salary since now TS understands\\n      // and discriminates between the two types you have\\n      console.log(person.{gives you name, salary});\\n  }\\n}\\n</code></pre>","frontmatter":{"path":"/typescript-discriminator","type":"blog","date":"Apr 10, 2020","title":"Typescript discriminator"},"excerpt":"Very often we have use-cases where we would like to use a single type Union Type but still be sure about the properties inside them. But un…"}},{"node":{"id":"c7653b68-3d90-5977-8478-43647f104d0e","html":"<p>I was recently trying to make a simple countdown timer which counts from a specific time-interval and “finishes” itself.</p>\\n<p>I just found it amazing that a few lines of code could bring in such a thing!\\nthe code just uses a state called “minutes” which gets initialized with the total number of seconds for which the timer stays.</p>\\n<p>The component accepts minutes till which it must stay alive, converts that into seconds, runs the countdown and then clears the internal logic.</p>\\n<pre><code class=\\"language-{javascript}\\">&#x3C;Timer classNames=\\"time-text\\" minutes={Number(10)} />\\n</code></pre>\\n<p>And here’s the entire code.</p>\\n<pre><code class=\\"language-{javascript}\\">import React, { Fragment, useState, useEffect } from \'react\'\\n\\nconst Timer = ({ minutes, classNames }) => {\\n  if (!minutes) return null\\n\\n  const [seconds, setSeconds] = useState(minutes * 60)\\n\\n  useEffect(() => {\\n    let timeout = setInterval(() => {\\n      setSeconds(seconds - 1)\\n    }, 1000)\\n\\n    if (seconds &#x3C; 0) {\\n      clearTimeout(timeout)\\n    }\\n\\n    return () => {\\n      clearInterval(timeout)\\n    }\\n  }, [seconds])\\n\\n  const showMins = Math.floor(seconds / 60)\\n  const showSeconds = seconds % 60\\n\\n  const PadString = ({ number }) => String(number).padStart(2, \'0\')\\n\\n  if ((!showMins &#x26;&#x26; !showSeconds) || showMins &#x3C; 0)\\n    return &#x3C;span className={classNames}>Complete!&#x3C;/span>\\n\\n  return (\\n    &#x3C;Fragment>\\n      &#x3C;span className={classNames}>\\n        &#x3C;PadString number={showMins} />:&#x3C;PadString number={showSeconds} />\\n      &#x3C;/span>{\' \'}\\n      remaining\\n    &#x3C;/Fragment>\\n  )\\n}\\n\\nexport default Timer\\n</code></pre>\\n<p><img src=\\"./static/blog/simple-count-downtimer/count-down-timer.gif\\" alt=\\"count-down-timer\\"></p>\\n<p>And here\'s a codepen <a href=\\"https://codepen.io/dixitk13/pen/WNQPKye\\">link</a>.</p>","frontmatter":{"path":"/simple-count-downtimer","type":"blog","date":"Apr 24, 2019","title":"Simple Countdown Timer"},"excerpt":"I was recently trying to make a simple countdown timer which counts from a specific time-interval and “finishes” itself. I just found it am…"}}],"totalCount":3}}}')},lXoy:function(e,n,t){"use strict";t.d(n,"b",(function(){return o.b})),t.d(n,"c",(function(){return o.c})),t.d(n,"a",(function(){return g}));var o=t("LKM1"),a=(t("gMHT"),t("E53F")),s=t("q1tI"),r=t.n(s),i=t("Wbzz"),l=t("vOnD"),c=t("7Qib"),m=t("InJ6"),u=l.c.main.withConfig({displayName:"BlogPostsView__Blogs",componentId:"sc-107fu6g-0"})([""]),d=l.c.article.withConfig({displayName:"BlogPostsView__SmallBlogItem",componentId:"sc-107fu6g-1"})(["font-size:30px;margin:20px auto;padding:20px;border-radius:3px;background:",";box-shadow:",";transition:all 0.3s ease;cursor:pointer;&:hover{transform:translateY(-2px);}&:active{transform:translateZ(-12px);}p{font-size:18px;}"],m.a,m.c),p=Object(l.c)(o.a).withConfig({displayName:"BlogPostsView__PostHeading",componentId:"sc-107fu6g-2"})(["margin:20px 0;display:flex;justify-content:space-between;@media ","{min-height:unset;flex-direction:row;align-items:flex-start;}a{margin:0;padding:0;font-weight:550;font-size:1.4rem;color:",";text-decoration:none;&:hover{color:",";cursor:pointer;filter:brightness(1.2);}}small{font-size:18px;}"],c.a.mobile,m.h,m.i),h=function(e){var n=e.blogs;return n?r.a.createElement(r.a.Fragment,null,r.a.createElement(u,null,n&&n.map((function(e){var n=e.node,t=n.frontmatter,o=n.excerpt,a=n.id;return r.a.createElement(d,{key:"small-blog-item-"+a},r.a.createElement(p,{as:"header"},r.a.createElement(i.Link,{to:""+t.path},null==t?void 0:t.title),r.a.createElement("p",null,null==t?void 0:t.date)),r.a.createElement("p",null,o))})))):null},g=function(){return r.a.createElement(i.StaticQuery,{query:"1465357811",render:function(e){var n=e.blogs;return r.a.createElement(h,{blogs:n.edges})},data:a})}},vx99:function(e,n,t){"use strict";t.r(n),t.d(n,"query",(function(){return i}));var o=t("q1tI"),a=t.n(o),s=t("lXoy"),r=t("Zttt"),i="926552657";n.default=function(e){var n=e.data;return a.a.createElement(s.b,null,a.a.createElement(r.c,{siteMetadata:n.site.siteMetadata}),a.a.createElement(s.a,null))}}}]);
//# sourceMappingURL=component---src-pages-blog-js-b486ff276c8c2a5f474f.js.map