{"version":3,"sources":["webpack:///./static/svg/emojis.ts","webpack:///./src/components/Tags/TagList.js","webpack:///./src/pages/tags.js","webpack:///./src/components/Tags/TagDetail.js"],"names":["Emojis","chat","communication","process","TagsUnorderedList","styled","ul","rhythm","device","mobile","TagImage","span","minimal","css","EmojiImage","StyledListItem","li","background","fontColor","TagsListContainer","BlogMain","NumCount","Text","div","TagList","group","map","tag","index","tagValue","fieldValue","count","totalCount","key","TagListItem","to","kebabCase","Image","as","width","height","src","Icons","alt","TagsPage","data","allMarkdownRemark","title","site","siteMetadata","pageQuery","TagDetailMainContainer","AllTagsLink","NavLink","TagDetail","pageContext","edges","node","frontmatter","excerpt","path","date","id"],"mappings":"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","file":"component---src-pages-tags-js-0a00950d043b08461413.js","sourcesContent":["const chat = \"💬\";\nconst communication = \"📱\";\nconst process = \"⚙️\";\n\nexport const Emojis = {\n  chat,\n  communication,\n  process,\n};\n","import React from \"react\";\nimport { kebabCase } from \"lodash\";\nimport { Link } from \"gatsby\";\nimport styled, { css } from \"styled-components\";\n\nimport { rhythm, device } from \"../../utils\";\nimport { BlogMain } from \"../Blog\";\nimport { Icons } from \"../../../static/svg\";\nimport { Emojis } from \"../../../static/svg/emojis\";\n\nimport { background, fontColor } from \"../../styles\";\n\nconst boxDim = \"150px\";\nconst mobileBoxDim = \"150px\";\n\nconst TagsUnorderedList = styled.ul`\n  margin: ${rhythm(2)} 0 0 0;\n  list-style: none;\n  display: grid;\n  grid-gap: ${rhythm(0.5)};\n  grid-template-columns: repeat(4, ${boxDim});\n  @media ${device.mobile} {\n    grid-template-columns: repeat(2, ${mobileBoxDim});\n  }\n`;\n\nconst TagImage = styled.span`\n  transition: all 0.3s;\n\n  ${({ minimal }) =>\n    !minimal &&\n    css`\n      transform: rotate(-45deg);\n    `}\n\n  margin-bottom: 0;\n`;\n\nconst EmojiImage = styled(TagImage)`\n  font-size: 45px;\n`;\n\nconst StyledListItem = styled.li`\n  margin: 0;\n  height: ${boxDim};\n  width: ${boxDim};\n  border-radius: 5px;\n  position: relative;\n  transition: all 0.3s;\n  list-style: none;\n  &:hover {\n    transform: translateY(-2px);\n  }\n  &:active {\n    transform: translateZ(-12px);\n  }\n  @media ${device.mobile} {\n    height: ${mobileBoxDim};\n    width: ${mobileBoxDim};\n  }\n\n  a {\n    background: ${background};\n    color: ${fontColor};\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    align-items: center;\n    height: 100%;\n    width: 100%;\n    font-size: 15px;\n    padding: ${rhythm(0.5)} ${rhythm(0.5)} ${rhythm(0.25)} ${rhythm(0.5)};\n    border-radius: 3px;\n    text-decoration: none;\n    text-align: center;\n    &:hover {\n      ${TagImage} {\n        transform: unset;\n      }\n    }\n  }\n`;\n\nconst TagsListContainer = styled(BlogMain)``;\n\nconst NumCount = styled.span`\n  position: absolute;\n  transform: rotate(0deg);\n  height: 27px;\n  width: 33px;\n  border-radius: 3px 3px 3px 9px;\n  background: rgb(217, 68, 73);\n  text-align: center;\n  margin: 0 auto;\n  color: #fff;\n  top: 0;\n  right: 0;\n`;\n\nconst Text = styled.div`\n  width: 100%;\n  align-self: flex-end;\n`;\n\nexport const TagList = ({ group }) => {\n  return (\n    <TagsListContainer>\n      <TagsUnorderedList>\n        {group.map((tag, index) => (\n          <TagListItem\n            tagValue={tag.fieldValue}\n            count={tag.totalCount}\n            key={`${tag.fieldValue}-${index}`}\n          />\n        ))}\n      </TagsUnorderedList>\n    </TagsListContainer>\n  );\n};\n\nexport const TagListItem = ({ tagValue, count, minimal }) => {\n  if (minimal) {\n    return <Image minimal={minimal} tagValue={tagValue} />;\n  }\n  return (\n    <StyledListItem>\n      <Link to={`/tags/${kebabCase(tagValue)}/`}>\n        <Image tagValue={tagValue} />\n        <Text>{tagValue}</Text>\n      </Link>\n      <NumCount>{count}</NumCount>\n    </StyledListItem>\n  );\n};\n\nconst Image = ({ tagValue, minimal }) => {\n  if (Emojis[tagValue]) {\n    return (\n      <EmojiImage minimal={minimal} as=\"div\">\n        {Emojis[tagValue]}\n      </EmojiImage>\n    );\n  }\n\n  return (\n    <TagImage\n      as=\"img\"\n      width=\"55px\"\n      height=\"55px\"\n      minimal={minimal}\n      src={Icons[tagValue]}\n      alt={tagValue}\n    />\n  );\n};\n","import React from \"react\";\nimport { graphql } from \"gatsby\";\n\nimport { SEO } from \"../components/SEO\";\nimport { BlogWrapper } from \"../components/Blog\";\nimport { TagList } from \"../components/Tags\";\n\nconst TagsPage = ({\n  data: {\n    allMarkdownRemark: { group },\n    site: {\n      siteMetadata: { title },\n    },\n  },\n}) => (\n  <BlogWrapper>\n    <SEO title={title} />\n    <TagList group={group} />\n  </BlogWrapper>\n);\n\nexport default TagsPage;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      filter: { frontmatter: { type: { eq: \"blog\" } } }\n    ) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { graphql } from \"gatsby\";\n\nimport { BlogWrapper, BlogItem, NavLink, BlogMain } from \"../Blog\";\nimport { TagListItem } from \"../Tags\";\nimport { rhythm } from \"../../utils\";\n\nconst TagDetailMainContainer = styled(BlogMain)`\n  justify-content: flex-start;\n  align-items: center;\n  margin: ${rhythm(2)} 0 0 0;\n`;\n\nconst AllTagsLink = styled(NavLink)`\n  margin-top: auto;\n`;\n\nexport default function TagDetail({ pageContext, data }) {\n  const { tag } = pageContext;\n  const { edges, totalCount } = data.allMarkdownRemark;\n\n  return (\n    <BlogWrapper>\n      <TagDetailMainContainer>\n        <TagListItem minimal count={totalCount} tagValue={tag} />\n        {edges.map(({ node }, index) => {\n          const { frontmatter, excerpt } = node;\n          const { title, path, date, id } = frontmatter;\n          return (\n            <BlogItem\n              key={`tag-blog-item-${index}`}\n              id={id}\n              path={path}\n              date={date}\n              excerpt={excerpt}\n              title={title}\n            />\n          );\n        })}\n        <AllTagsLink to=\"/tags\">All tags</AllTagsLink>\n      </TagDetailMainContainer>\n    </BlogWrapper>\n  );\n}\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] }, type: { eq: \"blog\" } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            tags\n            link\n            path\n            date(formatString: \"MMM DD, YYYY\")\n          }\n          excerpt(truncate: true)\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}