(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{E53F:function(n){n.exports=JSON.parse('{"data":{"blogs":{"edges":[{"node":{"id":"596d991f-212b-56c4-8a74-c501d64fa4bc","html":"<p>I believe in making small pull requests and they can be either of features, bug fixes, changes/updates and improvements.</p>\\n<p>I\'ve always felt that need to entitle my PR\'s with:</p>\\n<ul>\\n<li>\\n<p>[DO-NOT-MERGE]:</p>\\n<ul>\\n<li>When i need to show it to my folks and get opinions or ideas and not having to send it out in an email/slack message.</li>\\n<li>Or when I need to get it reviewed from other managers out there if the behavior is finally what they asked for.</li>\\n<li>Or I need a build out prod version of my code</li>\\n</ul>\\n</li>\\n<li>\\n<p>[NEEDS-TESTING]: when I\'ve finished writing the code:</p>\\n<ul>\\n<li>but its 12am</li>\\n<li>or maybe my codebase lacks e2e for all the other code surrounding mine.\\nP.S: lets face it guys not everyone has strong e2e and pushes at 12 am, sets to auto-complete and sleeps the night.</li>\\n</ul>\\n</li>\\n</ul>\\n<p>[DRAFT] is my rescuer here where any teammate isn\'t going to click merge/approve and call it a day but is definately going to have a look to leave out comments to chime and continue the discussions</p>\\n<p>Ref: <a href=\\"https://github.blog/2019-02-14-introducing-draft-pull-requests/\\">https://github.blog/2019-02-14-introducing-draft-pull-requests/</a></p>\\n<h2>What I follow as nomenclature for Pull Requests:</h2>\\n<p>Most of my PR\'s follow a nomenclature for branch naming as well, call me victim of OCD but that\'s me!</p>\\n<ul>\\n<li><code class=\\"language-text\\">&lt;username&gt;/hotfix/&lt;branch-code-name&gt;</code> : for hot-fixes of course</li>\\n<li><code class=\\"language-text\\">&lt;username&gt;/changes/&lt;branch-code-name&gt;</code> : for changes/improvements</li>\\n<li><code class=\\"language-text\\">&lt;username&gt;/feature/&lt;branch-code-name&gt;</code>: for feature updates</li>\\n</ul>\\n<p>where branch code name is an at-most 3 letter word for what the branch is doing. I try not to name them like with prefix of an issue number since I am bad with numbers, but if you are that\'s the best way to do your nomenclature TBH.</p>\\n<p>I usually try to keep my commit messages short, so its readable in single line - about 50 or less should do it. If you\'d like to write more text, after the 50 lines a new line should be added and rest of the text should be wrapped at 72 lines-ish.</p>\\n<p>A good read about how I adopted the above <a href=\\"https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\\">here</a></p>\\n<p>Some argue making the commit message like a summary helps them the below for sending (nicely formatted emails)[https://thoughtbot.com/blog/send-a-patch-to-someone-using-git-format-patch], but meh - email\'s not going to live long hopefully.</p>\\n<div class=\\"gatsby-highlight\\" data-language=\\"bash\\"><pre class=\\"language-bash\\"><code class=\\"language-bash\\"><span class=\\"token function\\">git</span> format-patch <span class=\\"token operator\\">&lt;</span>branch<span class=\\"token operator\\">></span> --stdout</code></pre></div>\\n<p>Adopt <strong>rebase</strong>. It seems to keep the history clean, coming from the <strong>merge</strong> guy who used merge for several years now :)</p>","frontmatter":{"path":"/draft-pull-requests","type":"blog","date":"May 10, 2020","title":"Draft pull requests"},"excerpt":"I believe in making small pull requests and they can be either of features, bug fixes, changes/updates and improvements. I\'ve always felt t…"}},{"node":{"id":"a8274742-fd3c-5b0c-bd21-4b0a3f9b49c5","html":"<p>Very often we have use-cases where we would like to use a single type <code class=\\"language-text\\">Union Type</code> but still be sure about the properties inside them.</p>\\n<div class=\\"gatsby-highlight\\" data-language=\\"tsx\\"><pre class=\\"language-tsx\\"><code class=\\"language-tsx\\"><span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">Employee</span> <span class=\\"token punctuation\\">{</span>\\n  name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">;</span>\\n  salary<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">HumanResource</span> <span class=\\"token punctuation\\">{</span>\\n  name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">;</span>\\n  power<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">boolean</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">let</span> person<span class=\\"token operator\\">:</span> Employee <span class=\\"token operator\\">|</span> HumanResource<span class=\\"token punctuation\\">;</span></code></pre></div>\\n<p>But under the hood Typescript union\'s are more of \\"common\\" properties inside them instead of \\"having all the properties\\".</p>\\n<p>So when you try and use it like:</p>\\n<div class=\\"gatsby-highlight\\" data-language=\\"tsx\\"><pre class=\\"language-tsx\\"><code class=\\"language-tsx\\"><span class=\\"token keyword\\">let</span> helloPerson <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>person<span class=\\"token operator\\">:</span> Employee <span class=\\"token operator\\">|</span> HumanResource<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token parameter\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n   <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>person<span class=\\"token punctuation\\">.</span><span class=\\"token operator\\">&lt;</span>only has properties common to Employee <span class=\\"token operator\\">&amp;</span> HumanResource aka name<span class=\\"token operator\\">></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span></code></pre></div>\\n<p>where as you would expect person to have <code class=\\"language-text\\">{name, salary}</code> or <code class=\\"language-text\\">{name, power}</code> and choose between them depending on what person is.</p>\\n<p>This is where discriminators come in power-play. Bear with my variable nomenclature:</p>\\n<p>Lets define an enum to contain both the use-cases of Person\'s we have, calling it <code class=\\"language-text\\">PersonType</code> and then define a type combining <code class=\\"language-text\\">HumanResource</code> and <code class=\\"language-text\\">Employee</code>.</p>\\n<div class=\\"gatsby-highlight\\" data-language=\\"tsx\\"><pre class=\\"language-tsx\\"><code class=\\"language-tsx\\"><span class=\\"token keyword\\">enum</span> PersonType <span class=\\"token punctuation\\">{</span> <span class=\\"token string\\">\\"EMPLOYEE\\"</span> <span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"HR\\"</span> <span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">Employee</span> <span class=\\"token punctuation\\">{</span>\\n  name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">type</span><span class=\\"token operator\\">:</span> PersonType<span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">EMPLOYEE</span>\\n\\tsalary<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">HumanResource</span> <span class=\\"token punctuation\\">{</span>\\n  name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">type</span><span class=\\"token operator\\">:</span> PersonType<span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">HR</span>\\n  power<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">boolean</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">type</span> Person <span class=\\"token operator\\">=</span> HumanResource <span class=\\"token operator\\">|</span> Employee<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">let</span> person<span class=\\"token operator\\">:</span> Employee <span class=\\"token operator\\">|</span> HumanResource<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">let</span> helloPerson <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>person<span class=\\"token operator\\">:</span> Person<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token parameter\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">switch</span><span class=\\"token punctuation\\">(</span>person<span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">type</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">case</span> PersonType<span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">EMPLOYEE</span><span class=\\"token operator\\">:</span>\\n      <span class=\\"token comment\\">// this gives you both name/salary since now TS understands</span>\\n      <span class=\\"token comment\\">// and discriminates between the two types you have</span>\\n      <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>person<span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">{</span>gives you name<span class=\\"token punctuation\\">,</span> salary<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span></code></pre></div>","frontmatter":{"path":"/typescript-discriminator","type":"blog","date":"Apr 10, 2020","title":"Typescript discriminator"},"excerpt":"Very often we have use-cases where we would like to use a single type  but still be sure about the properties inside them. But under the ho…"}},{"node":{"id":"c7653b68-3d90-5977-8478-43647f104d0e","html":"<p>I was recently trying to make a simple countdown timer which counts from a specific time-interval and “finishes” itself.</p>\\n<p>I just found it amazing that a few lines of code could bring in such a thing!\\nthe code just uses a state called “minutes” which gets initialized with the total number of seconds for which the timer stays.</p>\\n<p>The component accepts minutes till which it must stay alive, converts that into seconds, runs the countdown and then clears the internal logic.</p>\\n<div class=\\"gatsby-highlight\\" data-language=\\"jsx\\"><pre class=\\"language-jsx\\"><code class=\\"language-jsx\\"><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Timer</span></span> <span class=\\"token attr-name\\">classNames</span><span class=\\"token attr-value\\"><span class=\\"token punctuation\\">=</span><span class=\\"token punctuation\\">\\"</span>time-text<span class=\\"token punctuation\\">\\"</span></span> <span class=\\"token attr-name\\">minutes</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span><span class=\\"token function\\">Number</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">}</span></span> <span class=\\"token punctuation\\">/></span></span></code></pre></div>\\n<p>And here’s the entire code.</p>\\n<div class=\\"gatsby-highlight\\" data-language=\\"jsx\\"><pre class=\\"language-jsx\\"><code class=\\"language-jsx\\"><span class=\\"token keyword\\">import</span> React<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span> Fragment<span class=\\"token punctuation\\">,</span> useState<span class=\\"token punctuation\\">,</span> useEffect <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">\\"react\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">Timer</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token punctuation\\">{</span> minutes<span class=\\"token punctuation\\">,</span> classNames <span class=\\"token punctuation\\">}</span></span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>minutes<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">[</span>seconds<span class=\\"token punctuation\\">,</span> setSeconds<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">useState</span><span class=\\"token punctuation\\">(</span>minutes <span class=\\"token operator\\">*</span> <span class=\\"token number\\">60</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token function\\">useEffect</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> timeout <span class=\\"token operator\\">=</span> <span class=\\"token function\\">setInterval</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">setSeconds</span><span class=\\"token punctuation\\">(</span>seconds <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1000</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>seconds <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">clearTimeout</span><span class=\\"token punctuation\\">(</span>timeout<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">clearInterval</span><span class=\\"token punctuation\\">(</span>timeout<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span>seconds<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token keyword\\">const</span> showMins <span class=\\"token operator\\">=</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">floor</span><span class=\\"token punctuation\\">(</span>seconds <span class=\\"token operator\\">/</span> <span class=\\"token number\\">60</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">const</span> showSeconds <span class=\\"token operator\\">=</span> seconds <span class=\\"token operator\\">%</span> <span class=\\"token number\\">60</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">PadString</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token punctuation\\">{</span> number <span class=\\"token punctuation\\">}</span></span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> <span class=\\"token function\\">String</span><span class=\\"token punctuation\\">(</span>number<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">padStart</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"0\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>showMins <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token operator\\">!</span>showSeconds<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span> showMins <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>span</span> <span class=\\"token attr-name\\">className</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span>classNames<span class=\\"token punctuation\\">}</span></span><span class=\\"token punctuation\\">></span></span><span class=\\"token plain-text\\">Complete!</span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>span</span><span class=\\"token punctuation\\">></span></span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Fragment</span></span><span class=\\"token punctuation\\">></span></span><span class=\\"token plain-text\\">\\n      </span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>span</span> <span class=\\"token attr-name\\">className</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span>classNames<span class=\\"token punctuation\\">}</span></span><span class=\\"token punctuation\\">></span></span><span class=\\"token plain-text\\">\\n        </span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">PadString</span></span> <span class=\\"token attr-name\\">number</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span>showMins<span class=\\"token punctuation\\">}</span></span> <span class=\\"token punctuation\\">/></span></span><span class=\\"token plain-text\\">:</span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">PadString</span></span> <span class=\\"token attr-name\\">number</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span>showSeconds<span class=\\"token punctuation\\">}</span></span> <span class=\\"token punctuation\\">/></span></span><span class=\\"token plain-text\\">\\n      </span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>span</span><span class=\\"token punctuation\\">></span></span><span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\" \\"</span><span class=\\"token punctuation\\">}</span><span class=\\"token plain-text\\">\\n      remaining\\n    </span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span><span class=\\"token class-name\\">Fragment</span></span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">default</span> Timer<span class=\\"token punctuation\\">;</span></code></pre></div>\\n<p><img src=\\"/blog/simple-count-downtimer/count-down-timer.gif\\" alt=\\"count-down-timer\\"></p>\\n<p>And below\'s a codepen link:</p>\\n<p><a href=\\"https://codepen.io/dixitk13/pen/WNQPKye\\">https://codepen.io/dixitk13/pen/WNQPKye</a></p>","frontmatter":{"path":"/simple-count-downtimer","type":"blog","date":"Apr 24, 2019","title":"Simple countdown timer"},"excerpt":"I was recently trying to make a simple countdown timer which counts from a specific time-interval and “finishes” itself. I just found it am…"}},{"node":{"id":"ec908e24-e9db-54bc-8ecb-6040a56cfb77","html":"<p>The entire world is hooked on messaging and being connected digitally.\\nOur world revolves around notifications and checking them or needing to check them due to on-call duties or maybe you are just the kind of person who replies to chats instantly.</p>\\n<p>The notification sound of iMessage is just iconic or has become iconic. But do multiple notifications irritate you?</p>\\n<p>Do you get irritated by 5 notifications grouped under the same application by a single friend of yours?</p>\\n<h2>Scenario 1</h2>\\n<div class=\\"gatsby-highlight\\" data-language=\\"text\\"><pre class=\\"language-text\\"><code class=\\"language-text\\">[10:15 AM] John Parker: Hi Dixit\\n[10:15 AM] John Parker: About that PR\\n[10:16 AM] John Parker: Did you get a chance to look at it\\n[10:16 AM] John Parker: ?\\n[10:17 AM] John Parker: Its just a small change from the ticket TKT-123\\n[10:17 AM] John Parker: Here&#39;s a link for the same\\n[10:18 AM] John Parker: https://github.com/TKT/pulls/321\\n[10:20 AM] Dixit Patel: Nope, totally forgot. Lemme do it right away!\\n[10:25 AM] John Parker: Also, that PR doesn&#39;t fix 123 completely,\\n[10:25 AM] John Parker: its a sub-task\\n[10:25 AM] John Parker: jira stuff you know ...\\n[10:26 AM] John Parker: but boss signed off\\n[10:26 AM] John Parker: gotta ship it\\n[10:30 AM] Dixit Patel: Right, on it.</code></pre></div>\\n<h1>I do! There, I said it! 🙈</h1>\\n<p>Most of people in this world might have used one or another form of chat/messaging\\nlike iMessage, Jabber, Slack, Teams, etc. Today, at most workplaces messaging is an essential part of communication for most people working w/ each other.</p>\\n<p>Software engineers all have a habit of writing code and\\nusing the most popular version control to manage their code called GIT.</p>\\n<p>Can you follow that with your chats? - Absolutely!</p>\\n<p>Here\'s what I do, or rather how my pings look like:</p>\\n<div class=\\"gatsby-highlight\\" data-language=\\"text\\"><pre class=\\"language-text\\"><code class=\\"language-text\\">[10:15 AM] Dixit: Hi John, about that PR, did you get a\\nchance to look at it? Its just a small change from the\\nticket TKT-123. Here&#39;s a link for the same:\\nhttps://github.com/TKT/pulls/321</code></pre></div>\\n<p>Further on if John wants to say \\"He\'s looking at it\\", he either reacts with\\nan \\"ACK\\" reaction/emoji on the same message or says in a straight one liner,\\nand the conversation could maybe be something like:</p>\\n<h2>Scenario 2</h2>\\n<div class=\\"gatsby-highlight\\" data-language=\\"text\\"><pre class=\\"language-text\\"><code class=\\"language-text\\">[10:15 AM] Dixit Patel: Hi John, about that PR, did you get a\\nchance to look at it? Its just a small change from the\\nticket TKT-123. Here&#39;s a link for the same:\\nhttps://github.com/TKT/pulls/321 &lt;👌&gt;\\n\\n[10:16 AM] John Parker: Nah, I didn&#39;t get a chance mate.\\nLemme do that right away.\\n\\n[10:17 AM] Dixit Patel: Also, that PR doesn&#39;t completely fix TKT-123, but\\nattempts a sub-task for it. Boss says ship it and complete the TKT-123\\nlater in the day.\\n\\n[10:18 AM] John Parker: Right, on it. Also The TKT-331 kinda\\nneeds some priority. Seems to me like its breaking on\\nChrome 83 due to downloads being blocked in iframe,\\nbefore customers report. Should be a small fix.</code></pre></div>\\n<p>Now one would ask, what does this benefit me with?</p>\\n<p>Well, I\'ll say why maintain commit history with 52th word mark and wrap the rest of the commit message at 72th word mark?</p>\\n<h1>📜 HISTORY 📜</h1>\\n<p>Its\'s a powerful thing. Commit history is a very important thing!\\nIt helps understand the how the code has been developing and what churn has\\nbeen happening in the codebase, etc etc.</p>\\n<p>To me scenario 1 looks like a commit history which is shown below:</p>\\n<div class=\\"gatsby-highlight\\" data-language=\\"text\\"><pre class=\\"language-text\\"><code class=\\"language-text\\">* 5d53d5a - complete\\n* 3b97cf3 - wip\\n* 8c2e4b8 - pull from master\\n* 4407227 - boss called wip\\n* 70cdc42 - typo\\n* 329f368 - fix padding/margin\\n* 18007ad - #ABC321 in progress</code></pre></div>\\n<p>Where as the scenario 2 looks like:</p>\\n<div class=\\"gatsby-highlight\\" data-language=\\"text\\"><pre class=\\"language-text\\"><code class=\\"language-text\\">* 6e53924 - Fix TKT-333 bug found via review w/ @jparker\\n* 844b34c - Fix TKT-331 chrome 83 iframe download\\n* 57152ff - Feat TKT-322 allowing i18n for only the menus</code></pre></div>\\n<p>Which one do you like more? Retrospection is the key, scroll two pages up and\\nyou\'ll have conversations which kinda helps remember the status of things.</p>\\n<p>Use threads.\\nThreads will let you condense/group those conversations into singular items.</p>\\n<p>Together we can make \\"chat-history-great\\"!🍻</p>","frontmatter":{"path":"/one-liner-chats","type":"blog","date":"Jan 10, 2019","title":"One liner chats?"},"excerpt":"The entire world is hooked on messaging and being connected digitally.\\nOur world revolves around notifications and checking them or needing…"}}],"totalCount":4}}}')},lXoy:function(n,a,s){"use strict";s.d(a,"d",(function(){return t.c})),s.d(a,"b",(function(){return t.b})),s.d(a,"e",(function(){return t.d})),s.d(a,"f",(function(){return t.e})),s.d(a,"c",(function(){return g})),s.d(a,"a",(function(){return h}));var t=s("LKM1"),e=(s("gMHT"),s("E53F")),o=s("q1tI"),p=s.n(o),c=s("Wbzz"),l=s("vOnD"),i=s("7Qib"),u=s("InJ6"),r=l.c.article.withConfig({displayName:"BlogPostsView__BlogItemArticle",componentId:"sc-107fu6g-0"})(["font-size:30px;padding:20px;border-radius:3px;transition:all 0.3s ease;cursor:pointer;width:100%;&:hover{transform:translateY(-2px);}&:active{transform:translateZ(-12px);}p{font-size:18px;}"]),k=Object(l.c)(t.a).withConfig({displayName:"BlogPostsView__PostHeading",componentId:"sc-107fu6g-1"})(["margin:20px 0 10px 0;display:flex;justify-content:space-between;a{margin:0;padding:0;font-weight:900;font-size:40px;color:",';text-decoration:none;font-family:"Futura PT",-apple-system,sans-serif;&:hover{color:',";cursor:pointer;}}p{margin:0;}small{font-size:18px;}@media ","{min-height:unset;a{font-weight:900;font-size:27px;}}"],u.h,u.i,i.a.mobile),d=function(n){var a=n.blogs;return a?p.a.createElement(t.b,null,a&&a.map((function(n,a){var s=n.node,t=s.frontmatter,e=s.excerpt,o=s.id;return p.a.createElement(h,{id:o,key:"blog-item-"+a,date:t.date,excerpt:e,title:t.title,path:t.path})}))):null},h=function(n){var a=n.id,s=n.path,t=n.title,e=n.date,o=n.excerpt;return p.a.createElement(r,{key:"small-blog-item-"+a},p.a.createElement(k,{as:"header"},p.a.createElement(c.Link,{to:""+s},t),p.a.createElement("p",null,e)),p.a.createElement("p",null,o))},g=function(){return p.a.createElement(c.StaticQuery,{query:"1465357811",render:function(n){var a=n.blogs;return p.a.createElement(d,{blogs:a.edges})},data:e})}}}]);
//# sourceMappingURL=c5c6ea59f6063ae1f43365f7c25313b02f1478ff-a28c25e0b4e39ace6818.js.map