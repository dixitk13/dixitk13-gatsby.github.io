(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{E53F:function(n){n.exports=JSON.parse('{"data":{"blogs":{"edges":[{"node":{"id":"596d991f-212b-56c4-8a74-c501d64fa4bc","html":"<p>I believe in making small pull requests and they can be either of features, bug fixes, changes/updates and improvements.</p>\\n<p>I\'ve always felt that need to entitle my PR\'s with:</p>\\n<ul>\\n<li>\\n<p>[DO-NOT-MERGE]:</p>\\n<ul>\\n<li>When i need to show it to my folks and get opinions or ideas and not having to send it out in an email/slack message.</li>\\n<li>Or when I need to get it reviewed from other managers out there if the behavior is finally what they asked for.</li>\\n<li>Or I need a build out prod version of my code</li>\\n</ul>\\n</li>\\n<li>\\n<p>[NEEDS-TESTING]: when I\'ve finished writing the code:</p>\\n<ul>\\n<li>but its 12am</li>\\n<li>or maybe my codebase lacks e2e for all the other code surrounding mine.\\nP.S: lets face it guys not everyone has strong e2e and pushes at 12 am, sets to auto-complete and sleeps the night.</li>\\n</ul>\\n</li>\\n</ul>\\n<p>[DRAFT] is my rescuer here where any teammate isn\'t going to click merge/approve and call it a day but is definately going to have a look to leave out comments to chime and continue the discussions</p>\\n<p>Ref: <a href=\\"https://github.blog/2019-02-14-introducing-draft-pull-requests/\\">https://github.blog/2019-02-14-introducing-draft-pull-requests/</a></p>\\n<h2>What I follow as nomenclature for Pull Requests:</h2>\\n<p>Most of my PR\'s follow a nomenclature for branch naming as well, call me victim of OCD but that\'s me!</p>\\n<ul>\\n<li><code class=\\"language-text\\">&lt;username&gt;/hotfix/&lt;branch-code-name&gt;</code> : for hot-fixes of course</li>\\n<li><code class=\\"language-text\\">&lt;username&gt;/changes/&lt;branch-code-name&gt;</code> : for changes/improvements</li>\\n<li><code class=\\"language-text\\">&lt;username&gt;/feature/&lt;branch-code-name&gt;</code>: for feature updates</li>\\n</ul>\\n<p>where branch code name is an at-most 3 letter word for what the branch is doing. I try not to name them like with prefix of an issue number since I am bad with numbers, but if you are that\'s the best way to do your nomenclature TBH.</p>\\n<p>I usually try to keep my commit messages short, so its readable in single line - about 50 or less should do it. If you\'d like to write more text, after the 50 lines a new line should be added and rest of the text should be wrapped at 72 lines-ish.</p>\\n<p>A good read about how I adopted the above <a href=\\"https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\\">here</a></p>\\n<p>Some argue making the commit message like a summary helps them the below for sending (nicely formatted emails)[https://thoughtbot.com/blog/send-a-patch-to-someone-using-git-format-patch], but meh - email\'s not going to live long hopefully.</p>\\n<div class=\\"gatsby-highlight\\" data-language=\\"bash\\"><pre style=\\"counter-reset: linenumber NaN\\" class=\\"language-bash line-numbers\\"><code class=\\"language-bash\\"><span class=\\"token function\\">git</span> format-patch <span class=\\"token operator\\">&lt;</span>branch<span class=\\"token operator\\">></span> --stdout</code><span aria-hidden=\\"true\\" class=\\"line-numbers-rows\\" style=\\"white-space: normal; width: auto; left: 0;\\"><span></span></span></pre></div>\\n<p>Adopt <strong>rebase</strong>. It seems to keep the history clean, coming from the <strong>merge</strong> guy who used merge for several years now :)</p>","frontmatter":{"path":"/draft-pull-requests","type":"blog","date":"May 10, 2020","title":"Draft pull requests"},"excerpt":"I believe in making small pull requests and they can be either of features, bug fixes, changes/updates and improvements. I\'ve always felt t…"}},{"node":{"id":"a8274742-fd3c-5b0c-bd21-4b0a3f9b49c5","html":"<p>Very often we have use-cases where we would like to use a single type <code class=\\"language-text\\">Union Type</code> but still be sure about the properties inside them.</p>\\n<div class=\\"gatsby-highlight\\" data-language=\\"tsx\\"><pre style=\\"counter-reset: linenumber NaN\\" class=\\"language-tsx line-numbers\\"><code class=\\"language-tsx\\"><span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">Employee</span> <span class=\\"token punctuation\\">{</span>\\n  name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">;</span>\\n  salary<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">HumanResource</span> <span class=\\"token punctuation\\">{</span>\\n  name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">;</span>\\n  power<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">boolean</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">let</span> person<span class=\\"token operator\\">:</span> Employee <span class=\\"token operator\\">|</span> HumanResource<span class=\\"token punctuation\\">;</span></code><span aria-hidden=\\"true\\" class=\\"line-numbers-rows\\" style=\\"white-space: normal; width: auto; left: 0;\\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\\n<p>But under the hood Typescript union\'s are more of \\"common\\" properties inside them instead of \\"having all the properties\\".</p>\\n<p>So when you try and use it like:</p>\\n<div class=\\"gatsby-highlight\\" data-language=\\"tsx\\"><pre style=\\"counter-reset: linenumber NaN\\" class=\\"language-tsx line-numbers\\"><code class=\\"language-tsx\\"><span class=\\"token keyword\\">let</span> helloPerson <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>person<span class=\\"token operator\\">:</span> Employee <span class=\\"token operator\\">|</span> HumanResource<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token parameter\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n   <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>person<span class=\\"token punctuation\\">.</span><span class=\\"token operator\\">&lt;</span>only has properties common to Employee <span class=\\"token operator\\">&amp;</span> HumanResource aka name<span class=\\"token operator\\">></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span></code><span aria-hidden=\\"true\\" class=\\"line-numbers-rows\\" style=\\"white-space: normal; width: auto; left: 0;\\"><span></span><span></span><span></span></span></pre></div>\\n<p>where as you would expect person to have <code class=\\"language-text\\">{name, salary}</code> or <code class=\\"language-text\\">{name, power}</code> and choose between them depending on what person is.</p>\\n<p>This is where discriminators come in power-play. Bear with my variable nomenclature:</p>\\n<p>Lets define an enum to contain both the use-cases of Person\'s we have, calling it <code class=\\"language-text\\">PersonType</code> and then define a type combining <code class=\\"language-text\\">HumanResource</code> and <code class=\\"language-text\\">Employee</code>.</p>\\n<div class=\\"gatsby-highlight\\" data-language=\\"tsx\\"><pre style=\\"counter-reset: linenumber NaN\\" class=\\"language-tsx line-numbers\\"><code class=\\"language-tsx\\"><span class=\\"token keyword\\">enum</span> PersonType <span class=\\"token punctuation\\">{</span> <span class=\\"token string\\">\\"EMPLOYEE\\"</span> <span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"HR\\"</span> <span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">Employee</span> <span class=\\"token punctuation\\">{</span>\\n  name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">type</span><span class=\\"token operator\\">:</span> PersonType<span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">EMPLOYEE</span>\\n\\tsalary<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">HumanResource</span> <span class=\\"token punctuation\\">{</span>\\n  name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">type</span><span class=\\"token operator\\">:</span> PersonType<span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">HR</span>\\n  power<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">boolean</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">type</span> Person <span class=\\"token operator\\">=</span> HumanResource <span class=\\"token operator\\">|</span> Employee<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">let</span> person<span class=\\"token operator\\">:</span> Employee <span class=\\"token operator\\">|</span> HumanResource<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">let</span> helloPerson <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span>person<span class=\\"token operator\\">:</span> Person<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token parameter\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">switch</span><span class=\\"token punctuation\\">(</span>person<span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">type</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">case</span> PersonType<span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">EMPLOYEE</span><span class=\\"token operator\\">:</span>\\n      <span class=\\"token comment\\">// this gives you both name/salary since now TS understands</span>\\n      <span class=\\"token comment\\">// and discriminates between the two types you have</span>\\n      <span class=\\"token builtin\\">console</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span>person<span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">{</span>gives you name<span class=\\"token punctuation\\">,</span> salary<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span></code><span aria-hidden=\\"true\\" class=\\"line-numbers-rows\\" style=\\"white-space: normal; width: auto; left: 0;\\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"path":"/typescript-discriminator","type":"blog","date":"Apr 10, 2020","title":"Typescript discriminator"},"excerpt":"Very often we have use-cases where we would like to use a single type  but still be sure about the properties inside them. But under the ho…"}},{"node":{"id":"c7653b68-3d90-5977-8478-43647f104d0e","html":"<p>I was recently trying to make a simple countdown timer which counts from a specific time-interval and “finishes” itself.</p>\\n<p>I just found it amazing that a few lines of code could bring in such a thing!\\nthe code just uses a state called “minutes” which gets initialized with the total number of seconds for which the timer stays.</p>\\n<p>The component accepts minutes till which it must stay alive, converts that into seconds, runs the countdown and then clears the internal logic.</p>\\n<div class=\\"gatsby-highlight\\" data-language=\\"javascript\\"><pre style=\\"counter-reset: linenumber NaN\\" class=\\"language-javascript line-numbers\\"><code class=\\"language-javascript\\"><span class=\\"token operator\\">&lt;</span>Timer classNames<span class=\\"token operator\\">=</span><span class=\\"token string\\">\\"time-text\\"</span> minutes<span class=\\"token operator\\">=</span><span class=\\"token punctuation\\">{</span><span class=\\"token function\\">Number</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">10</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">}</span> <span class=\\"token operator\\">/</span><span class=\\"token operator\\">></span></code><span aria-hidden=\\"true\\" class=\\"line-numbers-rows\\" style=\\"white-space: normal; width: auto; left: 0;\\"><span></span></span></pre></div>\\n<p>And here’s the entire code.</p>\\n<div class=\\"gatsby-highlight\\" data-language=\\"jsx\\"><pre style=\\"counter-reset: linenumber NaN\\" class=\\"language-jsx line-numbers\\"><code class=\\"language-jsx\\"><span class=\\"token keyword\\">import</span> React<span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">{</span> Fragment<span class=\\"token punctuation\\">,</span> useState<span class=\\"token punctuation\\">,</span> useEffect <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">\\"react\\"</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">Timer</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token punctuation\\">{</span> minutes<span class=\\"token punctuation\\">,</span> classNames <span class=\\"token punctuation\\">}</span></span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>minutes<span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token punctuation\\">[</span>seconds<span class=\\"token punctuation\\">,</span> setSeconds<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> <span class=\\"token function\\">useState</span><span class=\\"token punctuation\\">(</span>minutes <span class=\\"token operator\\">*</span> <span class=\\"token number\\">60</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token function\\">useEffect</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">let</span> timeout <span class=\\"token operator\\">=</span> <span class=\\"token function\\">setInterval</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">setSeconds</span><span class=\\"token punctuation\\">(</span>seconds <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">1000</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n    <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>seconds <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">clearTimeout</span><span class=\\"token punctuation\\">(</span>timeout<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> <span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token function\\">clearInterval</span><span class=\\"token punctuation\\">(</span>timeout<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">,</span> <span class=\\"token punctuation\\">[</span>seconds<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token keyword\\">const</span> showMins <span class=\\"token operator\\">=</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">floor</span><span class=\\"token punctuation\\">(</span>seconds <span class=\\"token operator\\">/</span> <span class=\\"token number\\">60</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">const</span> showSeconds <span class=\\"token operator\\">=</span> seconds <span class=\\"token operator\\">%</span> <span class=\\"token number\\">60</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token keyword\\">const</span> <span class=\\"token function-variable function\\">PadString</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\"><span class=\\"token punctuation\\">{</span> number <span class=\\"token punctuation\\">}</span></span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=></span> <span class=\\"token function\\">String</span><span class=\\"token punctuation\\">(</span>number<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">padStart</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">2</span><span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"0\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span>showMins <span class=\\"token operator\\">&amp;&amp;</span> <span class=\\"token operator\\">!</span>showSeconds<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">||</span> showMins <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token keyword\\">return</span> <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>span</span> <span class=\\"token attr-name\\">className</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span>classNames<span class=\\"token punctuation\\">}</span></span><span class=\\"token punctuation\\">></span></span><span class=\\"token plain-text\\">Complete!</span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>span</span><span class=\\"token punctuation\\">></span></span><span class=\\"token punctuation\\">;</span>\\n\\n  <span class=\\"token keyword\\">return</span> <span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Fragment</span></span><span class=\\"token punctuation\\">></span></span><span class=\\"token plain-text\\">\\n      </span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span>span</span> <span class=\\"token attr-name\\">className</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span>classNames<span class=\\"token punctuation\\">}</span></span><span class=\\"token punctuation\\">></span></span><span class=\\"token plain-text\\">\\n        </span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">PadString</span></span> <span class=\\"token attr-name\\">number</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span>showMins<span class=\\"token punctuation\\">}</span></span> <span class=\\"token punctuation\\">/></span></span><span class=\\"token plain-text\\">:</span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">PadString</span></span> <span class=\\"token attr-name\\">number</span><span class=\\"token script language-javascript\\"><span class=\\"token script-punctuation punctuation\\">=</span><span class=\\"token punctuation\\">{</span>showSeconds<span class=\\"token punctuation\\">}</span></span> <span class=\\"token punctuation\\">/></span></span><span class=\\"token plain-text\\">\\n      </span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span>span</span><span class=\\"token punctuation\\">></span></span><span class=\\"token punctuation\\">{</span><span class=\\"token string\\">\\" \\"</span><span class=\\"token punctuation\\">}</span><span class=\\"token plain-text\\">\\n      remaining\\n    </span><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;/</span><span class=\\"token class-name\\">Fragment</span></span><span class=\\"token punctuation\\">></span></span>\\n  <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">default</span> Timer<span class=\\"token punctuation\\">;</span></code><span aria-hidden=\\"true\\" class=\\"line-numbers-rows\\" style=\\"white-space: normal; width: auto; left: 0;\\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\\n<p><img src=\\"/blog/simple-count-downtimer/count-down-timer.gif\\" alt=\\"count-down-timer\\"></p>\\n<p>And below\'s a codepen link:</p>\\n<p><a href=\\"https://codepen.io/dixitk13/pen/WNQPKye\\">https://codepen.io/dixitk13/pen/WNQPKye</a></p>","frontmatter":{"path":"/simple-count-downtimer","type":"blog","date":"Apr 24, 2019","title":"Simple countdown timer"},"excerpt":"I was recently trying to make a simple countdown timer which counts from a specific time-interval and “finishes” itself. I just found it am…"}}],"totalCount":3}}}')},lXoy:function(n,s,a){"use strict";a.d(s,"b",(function(){return t.b})),a.d(s,"c",(function(){return t.c})),a.d(s,"a",(function(){return g}));var t=a("LKM1"),e=(a("gMHT"),a("E53F")),p=a("q1tI"),o=a.n(p),c=a("Wbzz"),l=a("vOnD"),u=a("7Qib"),i=a("InJ6"),r=l.c.main.withConfig({displayName:"BlogPostsView__Blogs",componentId:"sc-107fu6g-0"})([""]),k=l.c.article.withConfig({displayName:"BlogPostsView__SmallBlogItem",componentId:"sc-107fu6g-1"})(["font-size:30px;padding:20px;border-radius:3px;transition:all 0.3s ease;cursor:pointer;&:hover{transform:translateY(-2px);}&:active{transform:translateZ(-12px);}p{font-size:18px;}"]),d=Object(l.c)(t.a).withConfig({displayName:"BlogPostsView__PostHeading",componentId:"sc-107fu6g-2"})(["margin:20px 0 10px 0;display:flex;justify-content:space-between;a{margin:0;padding:0;font-weight:900;font-size:40px;color:",';text-decoration:none;font-family:"Futura PT",-apple-system,sans-serif;&:hover{color:',";cursor:pointer;}}p{margin:0;}small{font-size:18px;}@media ","{min-height:unset;a{font-weight:900;font-size:27px;}}"],i.h,i.i,u.a.mobile),m=function(n){var s=n.blogs;return s?o.a.createElement(o.a.Fragment,null,o.a.createElement(r,null,s&&s.map((function(n){var s=n.node,a=s.frontmatter,t=s.excerpt,e=s.id;return o.a.createElement(k,{key:"small-blog-item-"+e},o.a.createElement(d,{as:"header"},o.a.createElement(c.Link,{to:""+a.path},null==a?void 0:a.title),o.a.createElement("p",null,null==a?void 0:a.date)),o.a.createElement("p",null,t))})))):null},g=function(){return o.a.createElement(c.StaticQuery,{query:"1465357811",render:function(n){var s=n.blogs;return o.a.createElement(m,{blogs:s.edges})},data:e})}}}]);
//# sourceMappingURL=463c400049cbfdd14f898fba69d967c9e731d23c-01f13e90d52a518d4420.js.map