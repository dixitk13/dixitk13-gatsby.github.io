(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{lXoy:function(n,e,a){"use strict";a.d(e,"d",(function(){return t.c})),a.d(e,"b",(function(){return t.b})),a.d(e,"e",(function(){return t.d})),a.d(e,"f",(function(){return t.e})),a.d(e,"c",(function(){return i})),a.d(e,"a",(function(){return u}));var t=a("LKM1"),s=(a("gMHT"),a("r/Xj")),m=a("q1tI"),d=a.n(m),o=a("Wbzz"),p=a("vOnD"),c=a("7Qib"),r=a("InJ6"),x=p.c.article.withConfig({displayName:"BlogPostsView__BlogItemArticle",componentId:"sc-107fu6g-0"})(["font-size:30px;padding:20px;border-radius:3px;transition:all 0.3s ease;cursor:pointer;width:100%;&:hover{transform:translateY(-2px);}&:active{transform:translateZ(-12px);}p{font-size:18px;}"]),N=Object(p.c)(t.a).withConfig({displayName:"BlogPostsView__PostHeading",componentId:"sc-107fu6g-1"})(["margin:20px 0 10px 0;display:flex;justify-content:space-between;a{margin:0;padding:0;font-weight:900;font-size:40px;color:",';text-decoration:none;font-family:"Futura PT",-apple-system,sans-serif;&:hover{color:',";cursor:pointer;}}p{margin:0;}small{font-size:18px;}@media ","{min-height:unset;a{font-weight:900;font-size:27px;}}"],r.h,r.i,c.a.mobile),l=function(n){var e=n.blogs;return e?d.a.createElement(t.b,null,e&&e.map((function(n,e){var a=n.node,t=a.frontmatter,s=a.excerpt,m=a.id;return d.a.createElement(u,{id:m,key:"blog-item-"+e,date:t.date,excerpt:s,title:t.title,path:t.path})}))):null},u=function(n){var e=n.id,a=n.path,t=n.title,s=n.date,m=n.excerpt;return d.a.createElement(x,{key:"small-blog-item-"+e},d.a.createElement(N,{as:"header"},d.a.createElement(o.Link,{to:""+a},t),d.a.createElement("p",null,s)),d.a.createElement("p",null,m))},i=function(){return d.a.createElement(o.StaticQuery,{query:"3855240819",render:function(n){var e=n.blogs;return d.a.createElement(l,{blogs:e.edges})},data:s})}},"r/Xj":function(n){n.exports=JSON.parse('{"data":{"blogs":{"edges":[{"node":{"id":"a3af941a-0870-5a10-bf93-aab04ae2240c","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\\n\\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\\n\\n/* @jsx mdx */\\nvar _frontmatter = {\\n  \\"title\\": \\"Fancies and Arrays\\",\\n  \\"date\\": \\"2020-06-10\\",\\n  \\"path\\": \\"/fancies-and-arrays\\",\\n  \\"type\\": \\"blog\\",\\n  \\"tags\\": [\\"javascript\\", \\"typescript\\"]\\n};\\n\\nvar makeShortcode = function makeShortcode(name) {\\n  return function MDXDefaultShortcode(props) {\\n    console.warn(\\"Component \\" + name + \\" was not imported, exported, or provided by MDXProvider as global scope\\");\\n    return mdx(\\"div\\", props);\\n  };\\n};\\n\\nvar layoutProps = {\\n  _frontmatter: _frontmatter\\n};\\nvar MDXLayout = \\"wrapper\\";\\nreturn function MDXContent(_ref) {\\n  var components = _ref.components,\\n      props = _objectWithoutProperties(_ref, [\\"components\\"]);\\n\\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\\n    components: components,\\n    mdxType: \\"MDXLayout\\"\\n  }), mdx(\\"p\\", null, \\"In this article we\\\\u2019ll go thro some array functions and then on-to some\\\\nstuff which I consider fancy stuff.\\\\nJump to \\", mdx(\\"a\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"href\\": \\"#Fancies\\"\\n  }), \\"fancy stuff\\")), mdx(\\"h2\\", {\\n    \\"id\\": \\"Arrays\\",\\n    \\"style\\": {\\n      \\"position\\": \\"relative\\"\\n    }\\n  }, mdx(\\"a\\", _extends({\\n    parentName: \\"h2\\"\\n  }, {\\n    \\"href\\": \\"#Arrays\\",\\n    \\"aria-label\\": \\"Arrays permalink\\",\\n    \\"className\\": \\"auto-link-header-class before\\"\\n  }), mdx(\\"svg\\", _extends({\\n    parentName: \\"a\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"height\\": \\"20\\",\\n    \\"version\\": \\"1.1\\",\\n    \\"viewBox\\": \\"0 0 16 16\\",\\n    \\"width\\": \\"20\\"\\n  }), mdx(\\"path\\", _extends({\\n    parentName: \\"svg\\"\\n  }, {\\n    \\"fillRule\\": \\"evenodd\\",\\n    \\"d\\": \\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"\\n  })))), \\"Arrays\\"), mdx(\\"p\\", null, \\"Let\\\\u2019s try going through some useful array functions:\\"), mdx(\\"blockquote\\", null, mdx(\\"p\\", {\\n    parentName: \\"blockquote\\"\\n  }, \\"filter\\")), mdx(\\"p\\", null, \\"The simplest array function - \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"filter\\"), \\". It will filter the elements of the array if\\\\ncondition is true - and will return a filtered array.\\"), mdx(\\"p\\", null, \\"Let\\\\u2019s try the simplest of functions i.e. to find elements which are even using\\\\nan inline function and a function which sits outside like \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"isEven\\"), \\" defined below.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"typescript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-typescript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-typescript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" arr\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"number\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"3\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"4\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"filter\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"x\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" x \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"%\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [1, 3]\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" isEven \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"x\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"number\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"boolean\\")), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" x \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"%\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"===\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"filter\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"isEven\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [2, 4]\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"The callback function provided by \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"filter\\"), \\" has an optional parameter which lets\\\\nyou access the position, so - lets try another function which tells us\\\\nelements which are at even positions.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"typescript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-typescript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-typescript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" arr2\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"number\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"5\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"6\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"7\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"9\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr2\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"filter\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"_\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" index\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"isEven\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"index\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [5, 7]\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" isEvenIndex \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"<\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"T\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\">\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"_\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"T\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" index\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"number\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"boolean\\")), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" index \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"%\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"===\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr2\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"filter\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"isEvenIndex\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [5, 7]\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// similarly w/ objects\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"interface\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"KV\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  k\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"string\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  v\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"number\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" arr3\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"KV\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" k\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"x\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" v\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" k\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"y\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" v\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"4\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" k\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"z\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" v\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"9\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" k\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"a\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" v\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"3\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr3\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"filter\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"x\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" x\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), \\"v \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"%\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"===\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [{k: \\\\\\"y\\\\\\", v: 4}]\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"blockquote\\", null, mdx(\\"p\\", {\\n    parentName: \\"blockquote\\"\\n  }, \\"findIndex\\")), mdx(\\"p\\", null, mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"findIndex\\"), \\" returns the index of the first element in the array where the\\\\ncallback function provided returns true.\\\\nElse, it returns -1, meaning no such element was found.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" arr1 \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"4\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"6\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"7\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function-variable function\\"\\n  }), \\"isPerfectSquareRoot\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"x\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" x \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\">\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"&&\\"), \\" Math\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"sqrt\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"x\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"%\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"===\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function-variable function\\"\\n  }), \\"isPerfectCubeRoot\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"x\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" x \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\">\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"&&\\"), \\" Math\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"cbrt\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"x\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"%\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"===\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"isPerfectSquareRoot\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"4\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// true\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"isPerfectCubeRoot\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"7\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// false\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"isPerfectCubeRoot\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"8\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// true\\"), \\"\\\\n\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr1\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"findIndex\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"isPerfectSquareRoot\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// 1 - which is 4\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr1\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"findIndex\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"isPerfectCubeRoot\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// -1 - meaning not present\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" nine\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"KV\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" k\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"z\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" v\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"9\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" arr3\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"KV\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" k\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"x\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" v\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" k\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"y\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" v\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"4\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" nine\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" k\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"a\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" v\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"3\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr3\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"filter\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"x\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" x\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), \\"v \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"%\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"===\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr3\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"findIndex\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"x\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" x\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), \\"v \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"===\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"9\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// 2\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr3\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"findIndex\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"x\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" x\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), \\"v \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"===\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// -1\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// also not to forget some object equality stuff\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr3\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"findIndex\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"x\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" x \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"===\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" k\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"z\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" v\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"9\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// -1\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr3\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"findIndex\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"x\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" x \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"===\\"), \\" nine\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// 2\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"blockquote\\", null, mdx(\\"p\\", {\\n    parentName: \\"blockquote\\"\\n  }, \\"some\\")), mdx(\\"p\\", null, mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"some\\"), \\" is used as an indicator to test and find out if a certain condition\\\\nexists inside the array. It also breaks out as soon as the condition is met\\\\ninstead of travesing the entire array.\\"), mdx(\\"p\\", null, \\"Refer \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"includes\\"), \\" to find out how its different than \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"some\\"), \\".\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" arr1 \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"4\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"6\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"7\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr1\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"some\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"x\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" x \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"%\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"!==\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// true\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"4\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"6\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"some\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"x\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" x \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"%\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"!==\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// false\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"blockquote\\", null, mdx(\\"p\\", {\\n    parentName: \\"blockquote\\"\\n  }, \\"includes\\")), mdx(\\"p\\", null, mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"includes\\"), \\" finds out if a particular element exists inside the array.\\"), mdx(\\"p\\", null, \\"It\\\\u2019s \\", mdx(\\"strong\\", {\\n    parentName: \\"p\\"\\n  }, \\"different\\"), \\" than \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"some\\"), \\" in the sense that it won\\\\u2019t allow for custom\\\\nfunctions which check the presence of an element.\\"), mdx(\\"p\\", null, mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"includes\\"), \\" is also similar to \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"indexOf\\"), \\" and behaves like a short-hand.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"typescript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-typescript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-typescript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" strs\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"string\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"The\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"quick\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"brown\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"fox\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"jumps\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"over\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"the\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"lazy\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"fox\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"strs\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"includes\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"fox\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// true\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"strs\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"includes\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"nox\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// false\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" myIncludes \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"<\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"T\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\">\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"T\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" ele\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"T\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"boolean\\")), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" arr\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"indexOf\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"ele\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"!==\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"-\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"myIncludes\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"strs\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"fox\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// true\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"myIncludes\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"strs\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"nox\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// false\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"blockquote\\", null, mdx(\\"p\\", {\\n    parentName: \\"blockquote\\"\\n  }, \\"concat\\")), mdx(\\"p\\", null, \\"A simple \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"concat\\"), \\" function which will concat two arrays and return\\\\na new array w/o changing the original array.\\"), mdx(\\"p\\", null, \\"Important thing to note is \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"concat\\"), \\" will not flatten nested arrays.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" a1 \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"a\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"b\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"c\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" a2 \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"d\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"e\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"b\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" a3 \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"x\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"a\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"y\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"a1\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"concat\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"a2\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [\'a\', \'b\', \'c\', \'d\', \'e\', \'b\']\\"), \\"\\\\n\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"a1\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"concat\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"a2\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" a3\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [\'a\', \'b\', \'c\', \'d\', \'e\', \'b\', \'x\', \'a\', \'y\']\\"), \\"\\\\n\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"a1\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [\'a\', \'b\', \'c\']\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" x1 \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"a\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"b\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" x2 \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"x\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"y\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"z\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"x1\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"concat\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"x2\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [\'a\', \'b\', \'x\', [\'y\', \'z\']]\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"blockquote\\", null, mdx(\\"p\\", {\\n    parentName: \\"blockquote\\"\\n  }, \\"forEach\\")), mdx(\\"p\\", null, mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"forEach\\"), \\" function is used to iterate over each element of the array as the name\\\\nspecifies, but it won\\\\u2019t return anything and is void.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"7\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"5\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"6\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"9\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"forEach\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"x\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" index\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\"\\\\n  console\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token template-string\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token template-punctuation string\\"\\n  }), \\"`\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"index: \\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation-punctuation punctuation\\"\\n  }), \\"${\\"), \\"index\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation-punctuation punctuation\\"\\n  }), \\"}\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\", value: \\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation-punctuation punctuation\\"\\n  }), \\"${\\"), \\"x\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation-punctuation punctuation\\"\\n  }), \\"}\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\" => \\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token template-punctuation string\\"\\n  }), \\"`\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// prints\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// index: 0, value: 7 => index:1, value: 5 => index: 2, value: 6 => index: 3, value: 9 =>\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"It also skips calling itself for empty elements.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"forEach\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"x\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" index\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\"\\\\n  console\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token template-string\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token template-punctuation string\\"\\n  }), \\"`\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"[index: \\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation-punctuation punctuation\\"\\n  }), \\"${\\"), \\"index\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation-punctuation punctuation\\"\\n  }), \\"}\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\": value: \\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation-punctuation punctuation\\"\\n  }), \\"${\\"), \\"x\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation-punctuation punctuation\\"\\n  }), \\"}\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"] => \\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token template-punctuation string\\"\\n  }), \\"`\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// nothing prints!\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"Another point to note about the \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"forEach\\"), \\" callback is that the callback\\\\nfunctions can\\\\u2019t be async and won\\\\u2019t wait for async operations to finish.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" fileDates \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"readFiles\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// doens\'t work and won\'t wait for generateForDate to finish\\"), \\"\\\\nfileDates\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"forEach\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"async\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"date\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"await\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"generateForDate\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"date\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// works, below is the right way\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"for\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" date \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"of\\"), \\" fileDates\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"await\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"generateForDate\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"date\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"blockquote\\", null, mdx(\\"p\\", {\\n    parentName: \\"blockquote\\"\\n  }, \\"every\\")), mdx(\\"p\\", null, mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"every\\"), \\" will make sure \\\\u201Cevery\\\\u201D element in the array will satisfy the callback condition.\\\\nIf yes - it returns a boolean value.\\\\nElse a falsy value to indicate the presence of an element where the callback\\\\nfunction doesn\\\\u2019t get satisfied.\\"), mdx(\\"p\\", null, \\"And yes it\\\\u2019ll also take into consideration sparse arrays.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), \\"console\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"4\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"every\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"x\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" x \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"%\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"===\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// false\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"4\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"every\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"x\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" x \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"%\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"===\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// true\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"blockquote\\", null, mdx(\\"p\\", {\\n    parentName: \\"blockquote\\"\\n  }, \\"find\\")), mdx(\\"p\\", null, mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"find\\"), \\" is very similar to \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"some\\"), \\" - it looks for the presence of the element\\\\nand breaks out as soon as it finds the truthy element and allows a function\\\\nfor checking the presence of the element.\\"), mdx(\\"p\\", null, \\"But instead of returning true/false it\\\\u2019ll return the actual element!\\\\nIf not found, it\\\\u2019ll return undefined.\\"), mdx(\\"p\\", null, mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"find\\"), \\" also will look for the first element - so be sure to have that\\\\nconditional logic in mind when using the function.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"typescript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-typescript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-typescript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"strs\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"find\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"x\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" x \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"===\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"nox\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// undefined\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"strs\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"find\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"x\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" x \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"===\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"fox\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// fox (first fox not the second fox)\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"strs\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"find\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"x\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" x \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"&&\\"), \\" x\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"startsWith\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"fo\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// fox (first fox not the second fox)\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"blockquote\\", null, mdx(\\"p\\", {\\n    parentName: \\"blockquote\\"\\n  }, \\"reverse\\")), mdx(\\"p\\", null, mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"reverse\\"), \\" will reverse an array in-place.\\\\n\\", mdx(\\"strong\\", {\\n    parentName: \\"p\\"\\n  }, \\"in-place\\"), \\" that\\\\u2019s right - so it\\\\u2019ll modify the original array.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"typescript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-typescript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-typescript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" arr\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"number\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"5\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"3\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [1, 5, 3]\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" rev\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"number\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" arr\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"reverse\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"rev\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [3, 5, 1]\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [3, 5, 1]\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"rev \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"===\\"), \\" arr\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// true\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"blockquote\\", null, mdx(\\"p\\", {\\n    parentName: \\"blockquote\\"\\n  }, \\"map\\")), mdx(\\"p\\", null, mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"map\\"), \\" is a very powerful function which like \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"forEach\\"), \\" loops over every element in\\\\nthe array and returns a new \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"mapped\\"), \\" element for every element as returned via the callback function.\\"), mdx(\\"p\\", null, \\"It doesn\\\\u2019t touch the original array.\\\\nIf nothing is returned from the map callback, it\\\\u2019ll be an undefined element inside\\\\nthe returned array.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"typescript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-typescript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-typescript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" arr\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"number\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"5\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"3\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"map\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"x\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" x \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"*\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [2, 10, 6]\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"map\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"x\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" x\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" x \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"*\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [ { x: 2 }, { x: 10 }, { x: 6 } ]\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"map\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"x\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" index\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" x\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" x \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"*\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" idx\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" index \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [ { x: 2, idx: 0 }, { x: 10, idx: 1 }, { x: 6, idx: 2 } ]\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"\\\\n  arr\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"map\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"x\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"if\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"x \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"%\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"===\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" x\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [undefined, undefined, undefined]\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"blockquote\\", null, mdx(\\"p\\", {\\n    parentName: \\"blockquote\\"\\n  }, \\"flat\\")), mdx(\\"p\\", null, mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"flat\\"), \\" will flatten the elements into a f-l-a-t structure and takes another\\\\nargument to determine how deep the function should recursively flatten.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// type DeepArray<T> = Array<T> | Array<DeepArray<T> | T>;\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" arr6 \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"a\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"b\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"c\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"d\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr6\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"flat\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [ \'a\', \'b\', [ \'c\', \'d\' ] ]\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" arr7 \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"a\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"b\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"c\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"d\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"e\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"f\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr7\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"flat\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [ \'a\', \'b\', \'c\', \'d\', [ \'e\', \'f\' ] ]\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" arr4 \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"a\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"b\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"c\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"d\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"e\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"f\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr4\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"flat\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [ \'a\', \'b\', \'c\', \'d\', \'e\', \'f\' ]\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" arr5 \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"a\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"b\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"c\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"d\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"e\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"f\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"g\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"h\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"i\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"j\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr5\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"flat\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"Infinity\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [ \'a\', \'b\', \'c\', \'d\', \'e\', \'f\', \'g\', \'h\', \'i\', \'j\' ]\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"blockquote\\", null, mdx(\\"p\\", {\\n    parentName: \\"blockquote\\"\\n  }, \\"reduce\\")), mdx(\\"p\\", null, mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"reduce\\"), \\" is yet another powerful function which will let you loop over\\\\nthe entire array and has a concept of accumulator which accumulates results\\\\nover the array.\\"), mdx(\\"p\\", null, \\"Simplest reduce function you\\\\u2019ll see is addition of array elements. At each step the\\\\naccumulator adds the element into itself and starts at 0 which is the starting\\\\npoint.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), \\"console\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"4\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"6\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"reduce\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"acc\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" x\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" acc \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"+\\"), \\" x\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// 11\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"table\\", null, mdx(\\"thead\\", {\\n    parentName: \\"table\\"\\n  }, mdx(\\"tr\\", {\\n    parentName: \\"thead\\"\\n  }, mdx(\\"th\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"index\\"), mdx(\\"th\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"value\\"), mdx(\\"th\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"accumulator\\"))), mdx(\\"tbody\\", {\\n    parentName: \\"table\\"\\n  }, mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"0\\"), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"1\\"), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"0 + 1 = 1\\")), mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"1\\"), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"4\\"), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"1 + 4 = 5\\")), mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"2\\"), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"6\\"), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"5 + 6 = 11\\")))), mdx(\\"p\\", null, mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"reduce\\"), \\" is very powerful and many people use it to create complex-objects out\\\\nor even changing the structure of elements. Ideally, I try to use \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"reduce\\"), \\" only when I want my function to\\\\nreturn a singular element.\\"), mdx(\\"p\\", null, \\"Let\\\\u2019s look at an example below for \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"reduce\\"), \\" where we\\\\u2019ll count the value of elements.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" items \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" x\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" y\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" y\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" z\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"4\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" z\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" a\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function-variable function\\"\\n  }), \\"summation\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"objects\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" objects\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"reduce\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"acc\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" objItem\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n      \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"...\\"), \\"acc\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n      \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"...\\"), \\"Object\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"keys\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"objItem\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"reduce\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"\\\\n        \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"keyAcc\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" key\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"...\\"), \\"keyAcc\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), \\"key\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" objItem\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), \\"key\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"+\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"acc\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), \\"key\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"||\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n        \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n      \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"summation\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"items\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// { x: 2, y: 3, z: 5, a: 1 }\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"Let\\\\u2019s walk thro this in brief via the same tabular approach:\\"), mdx(\\"table\\", null, mdx(\\"thead\\", {\\n    parentName: \\"table\\"\\n  }, mdx(\\"tr\\", {\\n    parentName: \\"thead\\"\\n  }, mdx(\\"th\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"index\\"), mdx(\\"th\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"value\\"), mdx(\\"th\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"accumulator\\"))), mdx(\\"tbody\\", {\\n    parentName: \\"table\\"\\n  }, mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"0\\"), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"{ x: 2, y: 1 }\\"), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"{ x: 2, y: 1 }\\")), mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"1\\"), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"{ y: 2, z: 4 }\\"), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"{ x: 2, y: 3, z: 4 }\\")), mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"2\\"), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"{ z: 1, a: 1 }\\"), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"{ x: 2, y: 3, z: 5, a: 1 }\\")))), mdx(\\"p\\", null, \\"We also have a function called \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"reduceRight\\"), \\" which runs from right-side of\\\\nthe array instead of from left.\\"), mdx(\\"blockquote\\", null, mdx(\\"p\\", {\\n    parentName: \\"blockquote\\"\\n  }, \\"from/of/fill\\")), mdx(\\"p\\", null, \\"So I\\\\u2019d like to discuss 3 Array functions viz. \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"from\\"), \\", \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"of\\"), \\" and \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"fill\\"), \\" together:\\"), mdx(\\"ul\\", null, mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"from\\"), \\" returns a shallow copy from an array-like structure.\\")), mdx(\\"p\\", null, \\"It also has a length property which you could set and get an\\\\narray of that length and map with a callback function.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), \\"console\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"Array\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"from\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"the\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [\\\\\\"t\\\\\\", \\\\\\"h\\\\\\", \\\\\\"e\\\\\\"]\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"Array\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"from\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// []\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"Array\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"from\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"1\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [\\\\\\"1\\\\\\"]\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"Array\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"from\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"3\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"x\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" x \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"*\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [2, 4, 6]\\"), \\"\\\\n\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"Array\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"from\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" length\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"3\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [\'undefined\', \'undefined\', \'undefined\']\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"Array\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"from\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" length\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"3\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"_\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" index\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" index\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [0, 1, 2]\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"ul\\", null, mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"of\\"), \\" creates an Array from the number of arguments provided\\")), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), \\"Array\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"of\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// []\\"), \\"\\\\nArray\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"of\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [1]\\"), \\"\\\\nArray\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"of\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"3\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [1, 2, 3]\\"), \\"\\\\nArray\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"of\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"a\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"b\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [\\\\\\"a\\\\\\", \\\\\\"b\\\\\\"]\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"ul\\", null, mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"fill\\"), \\" fills the array in-place and returns the modified array back\\")), mdx(\\"p\\", null, \\"It has the mandatory first parameter which is what gets filled in the entire array.\\\\nIt also has start(defaults to 0) and end (defaults to length of array)\\\\nparameters which are inclusive, exclusive respectively.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" arr \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"3\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"4\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"fill\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [0, 0, 3, 4]\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"fill\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"5\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [1, 5, 5, 5]\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"arr\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"fill\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"10\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [10, 10, 10, 10]\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"blockquote\\", null, mdx(\\"p\\", {\\n    parentName: \\"blockquote\\"\\n  }, \\"sort\\")), mdx(\\"p\\", null, \\"A simple \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"sort\\"), \\" function assumes the natural ordering and orders the elements\\\\nin ascending order for numeric elements by itself.\\"), mdx(\\"p\\", null, \\"An important fact to remember is, sorting is \\", mdx(\\"strong\\", {\\n    parentName: \\"p\\"\\n  }, \\"in-place\\"), \\" and default ordering\\\\nconverts numbers to strings and sorts them - checkout the 70 in the below example.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), \\"console\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"7\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"5\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"6\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"9\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"sort\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [5, 6, 7, 9]\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"70\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"5\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"6\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"9\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"sort\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [5, 6, 70, 9]\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"Subtracting the numbers and converting them is also something lots of people do\\\\nto maintain ordering like below.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), \\"console\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"70\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"6\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"5\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"9\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"sort\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"a\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" b\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" a \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"-\\"), \\" b\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [5, 6, 9, 70]\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"h2\\", {\\n    \\"id\\": \\"Fancies\\",\\n    \\"style\\": {\\n      \\"position\\": \\"relative\\"\\n    }\\n  }, mdx(\\"a\\", _extends({\\n    parentName: \\"h2\\"\\n  }, {\\n    \\"href\\": \\"#Fancies\\",\\n    \\"aria-label\\": \\"Fancies permalink\\",\\n    \\"className\\": \\"auto-link-header-class before\\"\\n  }), mdx(\\"svg\\", _extends({\\n    parentName: \\"a\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"height\\": \\"20\\",\\n    \\"version\\": \\"1.1\\",\\n    \\"viewBox\\": \\"0 0 16 16\\",\\n    \\"width\\": \\"20\\"\\n  }), mdx(\\"path\\", _extends({\\n    parentName: \\"svg\\"\\n  }, {\\n    \\"fillRule\\": \\"evenodd\\",\\n    \\"d\\": \\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"\\n  })))), \\"Fancies\\"), mdx(\\"p\\", null, \\"Let\\\\u2019s look at some fun stuff as well:\\"), mdx(\\"blockquote\\", null, mdx(\\"p\\", {\\n    parentName: \\"blockquote\\"\\n  }, \\"fisher-yates-shuffle\\")), mdx(\\"p\\", null, \\"The famous Fisher Yates shuffle algorithm. I won\\\\u2019t dive much into the working\\\\nand logic of it, but briefly state it out:\\"), mdx(\\"p\\", null, \\"Algorithm:\\"), mdx(\\"ul\\", null, mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, \\"init a variable called i as \\", mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"let i = array.length\\")), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, \\"Pick an element randomly from 0 - i, lets call it \\", mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"j\\")), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, \\"Swap the \\", mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"i\\"), \\" element with this picked element \\", mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"j\\")), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, \\"Shrink the size of picking the elements, so \\", mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"i--\\"), \\". Repeat from step 2.\\")), mdx(\\"p\\", null, \\"This ensures \\\\u201Cunbaised permutation\\\\u201D. Wikipedia is a better teacher than I am TBH - but below is the code\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"typescript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-typescript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-typescript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" letters \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"A\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"B\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"C\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"D\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"E\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"F\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"G\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"H\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"I\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"J\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" fisherYatesShuffle \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"<\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"T\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\">\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"array\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"T\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"T\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"let\\"), \\" i \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" array\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), \\"length\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"let\\"), \\" temp\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"T\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"let\\"), \\" j\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"number\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// while there remain elements to shuffle\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"while\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"i\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// Pick a remaining element\\"), \\"\\\\n    j \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" Math\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"floor\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"Math\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"random\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"*\\"), \\" i\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"--\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// And swap it with the current element\\"), \\"\\\\n    temp \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" array\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), \\"i\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n    array\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), \\"i\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" array\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), \\"j\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n    array\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), \\"j\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" temp\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" array\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"fisherYatesShuffle\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"letters\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [\\\\\\"I\\\\\\", \\\\\\"J\\\\\\", \\\\\\"A\\\\\\", \\\\\\"G\\\\\\", \\\\\\"C\\\\\\", \\\\\\"E\\\\\\", \\\\\\"H\\\\\\", \\\\\\"D\\\\\\", \\\\\\"F\\\\\\", \\\\\\"B\\\\\\"];\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"Great links to read about Fisher Yates Algorithm:\\"), mdx(\\"ul\\", null, mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"a\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"href\\": \\"https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\\",\\n    \\"rel\\": \\"nofollow noopener noreferrer external\\"\\n  }), \\"https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\\")), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"a\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"href\\": \\"https://bost.ocks.org/mike/shuffle/\\",\\n    \\"rel\\": \\"nofollow noopener noreferrer external\\"\\n  }), \\"https://bost.ocks.org/mike/shuffle/\\"))), mdx(\\"blockquote\\", null, mdx(\\"p\\", {\\n    parentName: \\"blockquote\\"\\n  }, \\"Letter Generate function\\")), mdx(\\"p\\", null, \\"We all know what\\\\u2019s the ascii for character \\\\u2018A\\\\u2019, its numeric 65.\\\\nBut how do we check that in JS?\\"), mdx(\\"p\\", null, \\"Well luckily function called \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"charCodeAt\\"), \\" tells us what\\\\u2019s the\\\\nascii code for the same and \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"String.fromCharCode\\"), \\" tells us the\\\\nreverse mapping for it.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), \\"console\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"A\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"charCodeAt\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// 65;\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"String\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"fromCharCode\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"65\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// \\\\\\"A\\\\\\";\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"Now let\\\\u2019s try and write a function which gives us letters from \\\\u2018A\\\\u2019\\\\nto a particular letter - which might look like this:\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"typescript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-typescript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-typescript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" generateLetters \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"startAscii\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"number\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" length\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"number\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"string\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" letters\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"string\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"Array\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"from\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" length \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"map\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"_\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" index\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\"\\\\n    String\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"fromCharCode\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"startAscii \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"+\\"), \\" index\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" letters\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"generateLetters\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"65\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [\'A\']\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"generateLetters\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"65\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"3\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [\'A\', \'B\', \'C\']\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"generateLetters\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"97\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"3\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [\'a\', \'b\']\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"blockquote\\", null, mdx(\\"p\\", {\\n    parentName: \\"blockquote\\"\\n  }, \\"PQ\\")), mdx(\\"p\\", null, \\"Let\\\\u2019s look at a naive Priority Queue implementation. Tries to treat an sorted\\\\narray as PQ and add/return values based on it for offer/poll respectively.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"function\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"Tuple\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"val\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" freq\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  val \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" val\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  freq \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" freq\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"function\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"toString\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"JSON\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"stringify\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" val\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" freq \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n    toString\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n    val\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n    freq\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"function\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"PQ\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  lst \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"function\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"offer\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"x\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n    lst\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"push\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"x\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n    lst\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"sort\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"x\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" y\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" x\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), \\"freq \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"-\\"), \\" y\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), \\"freq\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"function\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"poll\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"if\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"isEmpty\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"null\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"let\\"), \\" val \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" lst\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"shift\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" val\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"function\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"isEmpty\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" lst\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), \\"length \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"===\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n    offer\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n    poll\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n    isEmpty\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"let\\"), \\" pq \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"new\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"PQ\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"for\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"let\\"), \\" i \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" i \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"<\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"10\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" i\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"++\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  pq\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"offer\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"new\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"Tuple\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"i\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" Math\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"random\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"while\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"!\\"), \\"pq\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"isEmpty\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  console\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"element \\\\\\"\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"+\\"), \\" pq\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"poll\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// element {\\\\\\"val\\\\\\":8,\\\\\\"freq\\\\\\":0.0407238060411359}\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// element {\\\\\\"val\\\\\\":7,\\\\\\"freq\\\\\\":0.23583407354383357}\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// element {\\\\\\"val\\\\\\":6,\\\\\\"freq\\\\\\":0.24117641809409118}\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// element {\\\\\\"val\\\\\\":1,\\\\\\"freq\\\\\\":0.33821747985965533}\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// element {\\\\\\"val\\\\\\":9,\\\\\\"freq\\\\\\":0.40546659473293256}\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// element {\\\\\\"val\\\\\\":2,\\\\\\"freq\\\\\\":0.43895218033432615}\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// element {\\\\\\"val\\\\\\":5,\\\\\\"freq\\\\\\":0.5993946400967103}\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// element {\\\\\\"val\\\\\\":4,\\\\\\"freq\\\\\\":0.7927179659616519}\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// element {\\\\\\"val\\\\\\":0,\\\\\\"freq\\\\\\":0.887932230384556}\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// element {\\\\\\"val\\\\\\":3,\\\\\\"freq\\\\\\":0.999269467360683}\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"blockquote\\", null, mdx(\\"p\\", {\\n    parentName: \\"blockquote\\"\\n  }, \\"custom-iterator\\")), mdx(\\"p\\", null, \\"A custom JS iterator. JS offers a iterator which you can attach into\\\\nthe actual object like so:\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), \\"nums\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), \\"Symbol\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), \\"iterator\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" iteratorFn\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"Now you can use this object in \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"for..of\\"), \\", \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"for..in\\"), \\" and \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"...\\"), \\" spread statements.\\"), mdx(\\"p\\", null, \\"The function iterator has only two gotchas I\\\\u2019d say:\\"), mdx(\\"ul\\", null, mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, \\"return done as false and a value. Use closure values to find position of value.\\"), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, \\"return done as true with undefined value, when truly finished\\")), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function-variable function\\"\\n  }), \\"iterator\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"function\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// Get all the values in an array\\"), \\"\\\\n\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" values \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" Object\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"values\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"this\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// Store the current array key and value being iterated in the key\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"let\\"), \\" currentKeyIndex \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"let\\"), \\" currentValueIndex \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// Implementation of next()\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"next\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n      \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" currentValArray \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" values\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), \\"currentValueIndex\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n      \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"if\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"!\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"currentKeyIndex \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"<\\"), \\" currentValArray\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), \\"length\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n        \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// reset\\"), \\"\\\\n        currentValueIndex\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"++\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n        currentKeyIndex \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n      \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\\\n      \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"if\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"!\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"currentValueIndex \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"<\\"), \\" values\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), \\"length\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n        \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n          value\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"undefined\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n          done\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token boolean\\"\\n  }), \\"true\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n        \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n      \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\\\n      \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n        value\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" values\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), \\"currentValueIndex\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), \\"currentKeyIndex\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"++\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n        done\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token boolean\\"\\n  }), \\"false\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n      \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" nums \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  x\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"3\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n  y\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"4\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"5\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"6\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n  z\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"9\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"10\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"11\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\nnums\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), \\"Symbol\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), \\"iterator\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" iterator\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"for\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" num \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"of\\"), \\" nums\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  console\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"num\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// 1, 2, 3, 4, 5, 6, 9, 10, 11\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"...\\"), \\"nums\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// 1, 2, 3, 4, 5, 6, 9, 10, 11\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"...\\"), \\"nums\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), \\"length\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// 9\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))));\\n}\\n;\\nMDXContent.isMDXComponent = true;","frontmatter":{"path":"/fancies-and-arrays","type":"blog","date":"Jun 10, 2020","title":"Fancies and Arrays"},"excerpt":"In this article we\'ll go thro some array functions and then on-to some\\nstuff which I consider fancy stuff.\\nJump to  fancy stuff Arrays Let\'…"}},{"node":{"id":"db22495a-8172-57dd-856b-4b54dee1f209","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\\n\\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\\n\\n/* @jsx mdx */\\nvar _frontmatter = {\\n  \\"title\\": \\"Draft pull requests\\",\\n  \\"date\\": \\"2020-05-10\\",\\n  \\"path\\": \\"/draft-pull-requests\\",\\n  \\"type\\": \\"blog\\",\\n  \\"tags\\": [\\"process\\", \\"github\\"]\\n};\\n\\nvar makeShortcode = function makeShortcode(name) {\\n  return function MDXDefaultShortcode(props) {\\n    console.warn(\\"Component \\" + name + \\" was not imported, exported, or provided by MDXProvider as global scope\\");\\n    return mdx(\\"div\\", props);\\n  };\\n};\\n\\nvar layoutProps = {\\n  _frontmatter: _frontmatter\\n};\\nvar MDXLayout = \\"wrapper\\";\\nreturn function MDXContent(_ref) {\\n  var components = _ref.components,\\n      props = _objectWithoutProperties(_ref, [\\"components\\"]);\\n\\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\\n    components: components,\\n    mdxType: \\"MDXLayout\\"\\n  }), mdx(\\"p\\", null, \\"I believe in making small pull requests and they can be either of features, bug fixes, changes/updates and improvements.\\"), mdx(\\"p\\", null, \\"I\\\\u2019ve always felt that need to entitle my PR\\\\u2019s with:\\"), mdx(\\"ul\\", null, mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"p\\", {\\n    parentName: \\"li\\"\\n  }, \\"[DO-NOT-MERGE]\\", \\":\\"), mdx(\\"ul\\", {\\n    parentName: \\"li\\"\\n  }, mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, \\"When i need to show it to my folks and get opinions or ideas and not having to send it out in an email/slack message.\\"), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, \\"Or when I need to get it reviewed from other managers out there if the behavior is finally what they asked for.\\"), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, \\"Or I need a build out prod version of my code\\"))), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"p\\", {\\n    parentName: \\"li\\"\\n  }, \\"[NEEDS-TESTING]\\", \\": when I\\\\u2019ve finished writing the code:\\"), mdx(\\"ul\\", {\\n    parentName: \\"li\\"\\n  }, mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, \\"but its 12am\\"), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, \\"or maybe my codebase lacks e2e for all the other code surrounding mine.\\\\nP.S: lets face it guys not everyone has strong e2e and pushes at 12 am, sets to auto-complete and sleeps the night.\\")))), mdx(\\"p\\", null, \\"[DRAFT]\\", \\" is my rescuer here where any teammate isn\\\\u2019t going to click merge/approve and call it a day but is definately going to have a look to leave out comments to chime and continue the discussions\\"), mdx(\\"p\\", null, \\"Ref: \\", mdx(\\"a\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"href\\": \\"https://github.blog/2019-02-14-introducing-draft-pull-requests/\\",\\n    \\"rel\\": \\"nofollow noopener noreferrer external\\"\\n  }), \\"https://github.blog/2019-02-14-introducing-draft-pull-requests/\\")), mdx(\\"h2\\", {\\n    \\"id\\": \\"What-I-follow-as-nomenclature-for-Pull-Requests\\",\\n    \\"style\\": {\\n      \\"position\\": \\"relative\\"\\n    }\\n  }, mdx(\\"a\\", _extends({\\n    parentName: \\"h2\\"\\n  }, {\\n    \\"href\\": \\"#What-I-follow-as-nomenclature-for-Pull-Requests\\",\\n    \\"aria-label\\": \\"What I follow as nomenclature for Pull Requests permalink\\",\\n    \\"className\\": \\"auto-link-header-class before\\"\\n  }), mdx(\\"svg\\", _extends({\\n    parentName: \\"a\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"height\\": \\"20\\",\\n    \\"version\\": \\"1.1\\",\\n    \\"viewBox\\": \\"0 0 16 16\\",\\n    \\"width\\": \\"20\\"\\n  }), mdx(\\"path\\", _extends({\\n    parentName: \\"svg\\"\\n  }, {\\n    \\"fillRule\\": \\"evenodd\\",\\n    \\"d\\": \\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"\\n  })))), \\"What I follow as nomenclature for Pull Requests:\\"), mdx(\\"p\\", null, \\"Most of my PR\\\\u2019s follow a nomenclature for branch naming as well, call me victim of OCD but that\\\\u2019s me!\\"), mdx(\\"ul\\", null, mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"<username>/hotfix/<branch-code-name>\\"), \\" : for hot-fixes of course\\"), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"<username>/changes/<branch-code-name>\\"), \\" : for changes/improvements\\"), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"<username>/feature/<branch-code-name>\\"), \\": for feature updates\\")), mdx(\\"p\\", null, \\"where branch code name is an at-most 3 letter word for what the branch is doing. I try not to name them like with prefix of an issue number since I am bad with numbers, but if you are that\\\\u2019s the best way to do your nomenclature TBH.\\"), mdx(\\"p\\", null, \\"I usually try to keep my commit messages short, so its readable in single line - about 50 or less should do it. If you\\\\u2019d like to write more text, after the 50 lines a new line should be added and rest of the text should be wrapped at 72 lines-ish.\\"), mdx(\\"p\\", null, \\"A good read about how I adopted the above \\", mdx(\\"a\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"href\\": \\"https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\\",\\n    \\"rel\\": \\"nofollow noopener noreferrer external\\"\\n  }), \\"here\\")), mdx(\\"p\\", null, \\"Some argue making the commit message like a summary helps them the below for sending (nicely formatted emails)\\", \\"[https://thoughtbot.com/blog/send-a-patch-to-someone-using-git-format-patch]\\", \\", but meh - email\\\\u2019s not going to live long hopefully.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"bash\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-bash line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-bash\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"git\\"), \\" format-patch \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"<\\"), \\"branch\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\">\\"), \\" --stdout\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"Adopt \\", mdx(\\"strong\\", {\\n    parentName: \\"p\\"\\n  }, \\"rebase\\"), \\". It seems to keep the history clean, coming from the \\", mdx(\\"strong\\", {\\n    parentName: \\"p\\"\\n  }, \\"merge\\"), \\" guy who used merge for several years now :)\\"));\\n}\\n;\\nMDXContent.isMDXComponent = true;","frontmatter":{"path":"/draft-pull-requests","type":"blog","date":"May 10, 2020","title":"Draft pull requests"},"excerpt":"I believe in making small pull requests and they can be either of features, bug fixes, changes/updates and improvements. I\'ve always felt t…"}},{"node":{"id":"7fa09ac6-9bcb-5879-91d5-5ed91c162a0b","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\\n\\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\\n\\n/* @jsx mdx */\\nvar _frontmatter = {\\n  \\"title\\": \\"Typescript discriminator\\",\\n  \\"date\\": \\"2020-04-10\\",\\n  \\"path\\": \\"/typescript-discriminator\\",\\n  \\"type\\": \\"blog\\",\\n  \\"tags\\": [\\"react\\", \\"typescript\\"]\\n};\\n\\nvar makeShortcode = function makeShortcode(name) {\\n  return function MDXDefaultShortcode(props) {\\n    console.warn(\\"Component \\" + name + \\" was not imported, exported, or provided by MDXProvider as global scope\\");\\n    return mdx(\\"div\\", props);\\n  };\\n};\\n\\nvar layoutProps = {\\n  _frontmatter: _frontmatter\\n};\\nvar MDXLayout = \\"wrapper\\";\\nreturn function MDXContent(_ref) {\\n  var components = _ref.components,\\n      props = _objectWithoutProperties(_ref, [\\"components\\"]);\\n\\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\\n    components: components,\\n    mdxType: \\"MDXLayout\\"\\n  }), mdx(\\"p\\", null, \\"Very often we have use-cases where we would like to use a single type \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"Union Type\\"), \\" but still be sure about the properties inside them.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"tsx\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-tsx line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-tsx\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"interface\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"Employee\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  name\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"string\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  salary\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"number\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"interface\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"HumanResource\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  name\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"string\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  power\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"boolean\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"let\\"), \\" person\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" Employee \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"|\\"), \\" HumanResource\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"But under the hood Typescript union\\\\u2019s are more of \\\\u201Ccommon\\\\u201D properties inside them instead of \\\\u201Chaving all the properties\\\\u201D.\\"), mdx(\\"p\\", null, \\"So when you try and use it like:\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"tsx\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-tsx line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-tsx\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"let\\"), \\" helloPerson \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"person\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" Employee \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"|\\"), \\" HumanResource\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"void\\")), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n   \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"person\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"<\\"), \\"only has properties common to Employee \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"&\\"), \\" HumanResource aka name\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\">\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"where as you would expect person to have \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"{name, salary}\\"), \\" or \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"{name, power}\\"), \\" and choose between them depending on what person is.\\"), mdx(\\"p\\", null, \\"This is where discriminators come in power-play. Bear with my variable nomenclature:\\"), mdx(\\"p\\", null, \\"Lets define an enum to contain both the use-cases of Person\\\\u2019s we have, calling it \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"PersonType\\"), \\" and then define a type combining \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"HumanResource\\"), \\" and \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"Employee\\"), \\".\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"tsx\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-tsx line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-tsx\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"enum\\"), \\" PersonType \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"EMPLOYEE\\\\\\"\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"HR\\\\\\"\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"interface\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"Employee\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  name\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"string\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"type\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" PersonType\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"EMPLOYEE\\"), \\"\\\\n\\\\tsalary\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"number\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"interface\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"HumanResource\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  name\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"string\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"type\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" PersonType\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"HR\\"), \\"\\\\n  power\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"boolean\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"type\\"), \\" Person \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" HumanResource \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"|\\"), \\" Employee\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"let\\"), \\" person\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" Employee \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"|\\"), \\" HumanResource\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"let\\"), \\" helloPerson \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"person\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" Person\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"void\\")), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"switch\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"person\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"type\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"case\\"), \\" PersonType\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"EMPLOYEE\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\"\\\\n      \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// this gives you both name/salary since now TS understands\\"), \\"\\\\n      \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// and discriminates between the two types you have\\"), \\"\\\\n      \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"person\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"gives you name\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" salary\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))));\\n}\\n;\\nMDXContent.isMDXComponent = true;","frontmatter":{"path":"/typescript-discriminator","type":"blog","date":"Apr 10, 2020","title":"Typescript discriminator"},"excerpt":"Very often we have use-cases where we would like to use a single type  Union Type  but still be sure about the properties inside them. But …"}},{"node":{"id":"299ca33e-a2b6-5440-94c2-fe5bc96ca683","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\\n\\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\\n\\n/* @jsx mdx */\\nvar _frontmatter = {\\n  \\"title\\": \\"Regular Expressions\\",\\n  \\"date\\": \\"2020-02-20\\",\\n  \\"path\\": \\"/regular-expressions\\",\\n  \\"type\\": \\"blog\\",\\n  \\"tags\\": [\\"regex\\", \\"javascript\\"]\\n};\\n\\nvar makeShortcode = function makeShortcode(name) {\\n  return function MDXDefaultShortcode(props) {\\n    console.warn(\\"Component \\" + name + \\" was not imported, exported, or provided by MDXProvider as global scope\\");\\n    return mdx(\\"div\\", props);\\n  };\\n};\\n\\nvar layoutProps = {\\n  _frontmatter: _frontmatter\\n};\\nvar MDXLayout = \\"wrapper\\";\\nreturn function MDXContent(_ref) {\\n  var components = _ref.components,\\n      props = _objectWithoutProperties(_ref, [\\"components\\"]);\\n\\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\\n    components: components,\\n    mdxType: \\"MDXLayout\\"\\n  }), mdx(\\"p\\", null, \\"Everyone has used regular expressions sometime of life to check validation\\\\nof strings or you know capture a particular group of text you might be\\\\nlooking for. \\"), mdx(\\"p\\", null, \\"Today I\\\\u2019ll go over some basics, just for refreshers, incase folks are new\\\\nto regular expressions and some advanced stuff which I personally found useful.\\"), mdx(\\"p\\", null, \\"Skip directly to \\", mdx(\\"a\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"href\\": \\"#Advanced-Stuff\\"\\n  }), \\"Advanced Section\\"), \\" \\\\u27A1\\\\uFE0F\\"), mdx(\\"h2\\", {\\n    \\"id\\": \\"Basics\\",\\n    \\"style\\": {\\n      \\"position\\": \\"relative\\"\\n    }\\n  }, mdx(\\"a\\", _extends({\\n    parentName: \\"h2\\"\\n  }, {\\n    \\"href\\": \\"#Basics\\",\\n    \\"aria-label\\": \\"Basics permalink\\",\\n    \\"className\\": \\"auto-link-header-class before\\"\\n  }), mdx(\\"svg\\", _extends({\\n    parentName: \\"a\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"height\\": \\"20\\",\\n    \\"version\\": \\"1.1\\",\\n    \\"viewBox\\": \\"0 0 16 16\\",\\n    \\"width\\": \\"20\\"\\n  }), mdx(\\"path\\", _extends({\\n    parentName: \\"svg\\"\\n  }, {\\n    \\"fillRule\\": \\"evenodd\\",\\n    \\"d\\": \\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"\\n  })))), \\"Basics\\"), mdx(\\"p\\", null, \\"A regular expression consists of a pattern and a set of flags.\\\\nYou could do it in following ways:\\"), mdx(\\"ul\\", null, mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, \\"Use the contructor pattern\\\\ne.g.: \\", mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"new RegExp(\\\\\\"pattern\\\\\\")\\"), \\" or \\", mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"new RegExp(\\\\\\"pattern\\\\\\", \\\\\\"i\\\\\\")\\")), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, \\"Use the short hand by providing your pattern between \\", mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"/\\"), \\".\\\\nIn this specific scenario javascript considers any text between\\\\n\\", mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"/\\"), \\" as regular expressions but has some shortcomings which we\\\\u2019ll discuss later on.\\\\ne.g.: \\", mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"/pattern/\\"), \\" or \\", mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"/MYPATTER/i\\"))), mdx(\\"h3\\", null, \\"Flags\\"), mdx(\\"p\\", null, \\"Regular expressions have a few flags which are useful for creating powerful expressions viz.\\"), mdx(\\"table\\", null, mdx(\\"thead\\", {\\n    parentName: \\"table\\"\\n  }, mdx(\\"tr\\", {\\n    parentName: \\"thead\\"\\n  }, mdx(\\"th\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Flags\\"), mdx(\\"th\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Description\\"))), mdx(\\"tbody\\", {\\n    parentName: \\"table\\"\\n  }, mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"i\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Ignore case, says it all\\")), mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"g\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Global search across the entire string(not just first occurrence) and return all occurrences\\")), mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"m\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Multiline mode\\")), mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"y\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Sticky positions match\\")))), mdx(\\"p\\", null, \\"There\\\\u2019s more flags TBH, but the above are the most common ones I\\\\u2019ve come across.\\"), mdx(\\"h4\\", null, \\"Flag examples using match\\"), mdx(\\"p\\", null, \\"Starting with simpler examples. For the below examples, we\\\\u2019ll have a constant\\\\nparagraph like below and we\\\\u2019ll match against regex.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" paragraph \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\'The quick brown fox jumps over the lazy dog.\'\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"<\\"), \\"insert regex \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"from\\"), \\" below\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\">\\"), \\" \\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" found \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" paragraph\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"match\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"regex\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"found\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"Lets search for the word, \\\\u201Cthe\\\\u201D and we\\\\u2019ll do like so: \\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" regex \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token regex\\"\\n  }), \\"/the/\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\">\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"the\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), \\"\\\\n\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"found\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), \\"index\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\">\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"31\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"Oh nice, I can find the index for the match as well, huh! \\"), mdx(\\"p\\", null, \\"\\\\uD83E\\\\uDD14 Oh but wait, how can I ignore case and match the first \\\\u201CThe\\\\u201D?\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" regex \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token regex\\"\\n  }), \\"/the/i\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\">\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"The\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"Looks like the above matched only the first \\\\u201Cthe\\\\u201D by ignoring case. \\"), mdx(\\"p\\", null, \\"\\\\uD83D\\\\uDE36 Nah, that\\\\u2019s not what I was looking for.\\\\nWhat happens if I do a global search using a \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"g\\"), \\" flag?\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" regex \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token regex\\"\\n  }), \\"/the/g\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\">\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"the\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"Looks like it globally searched for the second the? \\"), mdx(\\"p\\", null, \\"\\\\uD83D\\\\uDE12 What happens if I do both \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"i\\"), \\" and \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"g\\"), \\" together?\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" regex \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token regex\\"\\n  }), \\"/the/ig\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\">\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"The\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"the\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"\\\\uD83E\\\\uDD28 I see that\\\\u2019s what it is? Ignore case and global search together huh.\\"), mdx(\\"h3\\", null, \\"Functions\\"), mdx(\\"p\\", null, \\"There\\\\u2019s three functions in string operations where regexes are super helpful viz.\\"), mdx(\\"ul\\", null, mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"match(/str1/)\\"), \\": Finds a \\\\u201Cmatch\\\\u201D for a string pattern.\\"), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"replace(/str1/, \\\\\\"str2\\\\\\")\\"), \\": Finds a match and replace it with another string as the 2nd argument. \\"), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"test(/str1/)\\"), \\": returns true/false for checking against a string pattern match.\\")), mdx(\\"p\\", null, \\"These will be the most common used functions.\\"), mdx(\\"p\\", null, \\"Regular expressions also have a \\", mdx(\\"em\\", {\\n    parentName: \\"p\\"\\n  }, \\"Shorthand\\"), \\" character classes, \\", mdx(\\"em\\", {\\n    parentName: \\"p\\"\\n  }, \\"Anchors\\"), \\"\\\\nand \\", mdx(\\"em\\", {\\n    parentName: \\"p\\"\\n  }, \\"Quantifiers\\"), \\" which all help in simplifying the targetted expressions.\\"), mdx(\\"p\\", null, \\"We\\\\u2019ll see \\", mdx(\\"em\\", {\\n    parentName: \\"p\\"\\n  }, \\"Quantifiers\\"), \\", \\", mdx(\\"em\\", {\\n    parentName: \\"p\\"\\n  }, \\"Anchors\\"), \\" and \\", mdx(\\"em\\", {\\n    parentName: \\"p\\"\\n  }, \\"Shorthand\\"), \\" character examples together.\\"), mdx(\\"h3\\", null, \\"Quantifiers\\"), mdx(\\"p\\", null, \\"A quantifier quantifies, like how many times does a particular \\\\u201Cexpression\\\\u201D occur.\\"), mdx(\\"table\\", null, mdx(\\"thead\\", {\\n    parentName: \\"table\\"\\n  }, mdx(\\"tr\\", {\\n    parentName: \\"thead\\"\\n  }, mdx(\\"th\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Quantifier\\"), mdx(\\"th\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Description\\"))), mdx(\\"tbody\\", {\\n    parentName: \\"table\\"\\n  }, mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"+\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Plus indicates one-or-more\\")), mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"*\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Star says zero-or-more, basically optional as well - the greedy boy!\\")), mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"?\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Question mark indicates, one-or-zero matches\\")), mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"|\\"), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"A logical OR ofcourse\\")))), mdx(\\"h3\\", null, \\"Anchors\\"), mdx(\\"p\\", null, \\"Regular expressions also have anchor elements viz. \\"), mdx(\\"table\\", null, mdx(\\"thead\\", {\\n    parentName: \\"table\\"\\n  }, mdx(\\"tr\\", {\\n    parentName: \\"thead\\"\\n  }, mdx(\\"th\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Anchors\\"), mdx(\\"th\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Description\\"))), mdx(\\"tbody\\", {\\n    parentName: \\"table\\"\\n  }, mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"^\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"starts with\\")), mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"$\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"ends with\\")))), mdx(\\"h3\\", null, \\"Shorthand Character classes\\"), mdx(\\"p\\", null, \\"Character classes are usually captured by surrounding them with square braces. \\"), mdx(\\"p\\", null, \\"If you specify \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"^\\"), \\" inside the capture braces \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"[^xyz]\\"), \\" they\\\\u2019d stand for negation. Yes, negation!\\\\nSo lets look at the character classes now:\\"), mdx(\\"p\\", null, \\"Words and digits: \\"), mdx(\\"table\\", null, mdx(\\"thead\\", {\\n    parentName: \\"table\\"\\n  }, mdx(\\"tr\\", {\\n    parentName: \\"thead\\"\\n  }, mdx(\\"th\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Pattern\\"), mdx(\\"th\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Description\\"))), mdx(\\"tbody\\", {\\n    parentName: \\"table\\"\\n  }, mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"[A-Z]\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"captures any captial alphabet between A to Z.\\")), mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"[a-z]\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"captures any small letter alphabet between a to z\\")), mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"[0-9]\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"any digit between 0 to 9. Short hand is \\", mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"[\\\\\\\\d]\\"))), mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"[\\\\\\\\w]\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"captures any word, in totality it stands for \\", mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"[a-zA-Z0-9]\\"))), mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"[\\\\\\\\W]\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"captures anything that\\\\u2019s not a word, in totality it stands for \\", mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"[^a-zA-Z0-9]\\"))), mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"[\\\\\\\\D]\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Short hand for not a digit.\\")))), mdx(\\"p\\", null, \\"White-space stuff:\\"), mdx(\\"table\\", null, mdx(\\"thead\\", {\\n    parentName: \\"table\\"\\n  }, mdx(\\"tr\\", {\\n    parentName: \\"thead\\"\\n  }, mdx(\\"th\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Pattern\\"), mdx(\\"th\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Description\\"))), mdx(\\"tbody\\", {\\n    parentName: \\"table\\"\\n  }, mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"[\\\\\\\\s]\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"captures any whitespace character.\\")), mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"[\\\\\\\\S]\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"captures any non-whitespace character.\\")), mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\".\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"any character of-course\\")))), mdx(\\"p\\", null, \\"Negation stuff: \\"), mdx(\\"table\\", null, mdx(\\"thead\\", {\\n    parentName: \\"table\\"\\n  }, mdx(\\"tr\\", {\\n    parentName: \\"thead\\"\\n  }, mdx(\\"th\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Pattern\\"), mdx(\\"th\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Description\\"))), mdx(\\"tbody\\", {\\n    parentName: \\"table\\"\\n  }, mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"[^abc]\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"would stand for not a, b, or c\\")), mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"[^apple]\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"would stand for not the word apple but everything apart from that word.\\")))), mdx(\\"h4\\", null, \\"Examples\\"), mdx(\\"p\\", null, \\"Let\\\\u2019s start with words and digits: \\"), mdx(\\"p\\", null, \\"Here\\\\u2019s lets say you just wanna match against finding the new bootstrap version?\\\\nOr maybe you changed your mind are are looking for versions of frameworks\\\\ni.e. words followed by numbers. Below are some examples illustrating the same: \\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" str0 \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"New Bootstrap5 is out. Older Boostrap4 isn\'t any good\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"str0\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"match\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token regex\\"\\n  }), \\"/(Bootstrap\\\\\\\\d)/\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// \\\\\\"Bootstrap5\\\\\\"\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"str0\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"match\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token regex\\"\\n  }), \\"/(\\\\\\\\w+\\\\\\\\d)/\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// \\\\\\"Bootstrap5\\\\\\"\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"str0\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"match\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token regex\\"\\n  }), \\"/(\\\\\\\\w+\\\\\\\\d)/g\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [\\\\\\"Bootstrap5\\\\\\", \\\\\\"Bootstrap4\\\\\\"]\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"Here goes the clique US telphone number regex: \\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" str0 \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"This is my nicely formatter number +1(123)-456-7890.\\\\\\"\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"+\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"Also this can be it w/o the extension 123-456-7890.\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"+\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"Rightly, I can put braces & hypens wherever (123) 456-7890\\\\\\"\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"+\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"Oh yeah, lets not forget w/o hypens: 123 456 7890\\\\\\"\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"+\\"), \\" \\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"Or the way with periods in between like:123.456.7890\\\\\\"\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"+\\"), \\" \\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"Gotta match\'em all!\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\nstr0\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"match\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token regex\\"\\n  }), \\"/((\\\\\\\\+\\\\\\\\d{1,2})?(\\\\\\\\(?\\\\\\\\d{3}\\\\\\\\)?.?\\\\\\\\d{3}.?\\\\\\\\d{4}))/g\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// [\\\\\\"+1(123)-456-7890\\\\\\", \\\\\\"123-456-7890\\\\\\", \\\\\\"(123) 456-7890\\\\\\", \\\\\\"123 456 7890\\\\\\", \\\\\\"123.456.7890\\\\\\"]\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"Let\\\\u2019s break it down one by one. \\"), mdx(\\"ul\\", null, mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"(\\\\\\\\+\\\\\\\\d{1,2})?\\"), \\": Indicates the symbols \\", mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"(\\"), \\" & \\", mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"+\\"), \\" followed by a digit quantifying as occuring max twice.\\\\nAnd the entire thing is optional since its followed by a \\", mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"?\\"), \\" indicating 0,1 occurrences. \\"), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"\\\\\\\\(?\\\\\\\\d{3}\\\\\\\\)?\\"), \\": Indicates the first and last round braces as being optional by using \\", mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"\\\\\\\\(?\\"), \\".\\\\nThe first \\", mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"\\\\\\\\\\"), \\" is the escape character used to implicitly say look for a round brace \\", mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"(\\"), \\".\\\\nThe \\", mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"\\\\\\\\d{3}\\"), \\" ofcourse says look for 3 digits.\\"), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\".?\\"), \\": Here we\\\\u2019re looking for an optional delimiter, like a space or \\", mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"-\\"), \\" or \\", mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\".\\"), \\".\\"), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"\\\\\\\\d{3}\\"), \\": Looking for the second set of 3 digits \\"), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\".?\\"), \\": Another optional delimiter\\"), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"\\\\\\\\d{4}\\"), \\": The last set of 4 digits to be captured. \\")), mdx(\\"p\\", null, \\"The entire expression is surrounded by round braces to allow capturing the expression. \\"), mdx(\\"p\\", null, \\"And Voila! We have a regex capturing a phone-number, but its not free of bugs I\\\\u2019d assume. \\"), mdx(\\"p\\", null, \\"Let\\\\u2019s try anchors. In the below example, raining ends with would match in L02 but\\\\nin L03 it won\\\\u2019t match rain as ending. We know ofcourse why. \\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" str1 \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"it was raining\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token regex\\"\\n  }), \\"/raining$/\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"test\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"str1\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// true\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token regex\\"\\n  }), \\"/rain$/\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"test\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"str1\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// false\\"), \\"\\\\n\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token regex\\"\\n  }), \\"/^it/\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"test\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"str1\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// true\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token regex\\"\\n  }), \\"/^was/\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"test\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"str1\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// false\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"Hope those examples made sense.\\"), mdx(\\"h2\\", {\\n    \\"id\\": \\"Advanced-Stuff\\",\\n    \\"style\\": {\\n      \\"position\\": \\"relative\\"\\n    }\\n  }, mdx(\\"a\\", _extends({\\n    parentName: \\"h2\\"\\n  }, {\\n    \\"href\\": \\"#Advanced-Stuff\\",\\n    \\"aria-label\\": \\"Advanced Stuff permalink\\",\\n    \\"className\\": \\"auto-link-header-class before\\"\\n  }), mdx(\\"svg\\", _extends({\\n    parentName: \\"a\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"height\\": \\"20\\",\\n    \\"version\\": \\"1.1\\",\\n    \\"viewBox\\": \\"0 0 16 16\\",\\n    \\"width\\": \\"20\\"\\n  }), mdx(\\"path\\", _extends({\\n    parentName: \\"svg\\"\\n  }, {\\n    \\"fillRule\\": \\"evenodd\\",\\n    \\"d\\": \\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"\\n  })))), \\"Advanced Stuff\\"), mdx(\\"p\\", null, \\"Lets start with Word Boundary and then go towards specific examples which I recently have written.\\"), mdx(\\"h3\\", null, \\"Word Boundary\\"), mdx(\\"ul\\", null, mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"[\\\\\\\\b]\\"), \\": the \\", mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"b\\"), \\" here stands for word-boundary.\\\\nWhich matches three things viz. A start of the sentence, end of sentence - since they \\\\u201Cboundaries\\\\u201D.\\\\nAnd it matches end/start of a word - meaning:\\")), mdx(\\"ol\\", null, mdx(\\"li\\", {\\n    parentName: \\"ol\\"\\n  }, \\"\\\\u201Ca place where the word can begin like with space\\\\u201D \\"), mdx(\\"li\\", {\\n    parentName: \\"ol\\"\\n  }, \\"\\\\u201Ca place where the word ends, like exclamation or another space\\\\u201D\\\\nLet\\\\u2019s see with examples shall we. \\")), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), \\"console\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"GO! Bananas, Monkey?\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"match\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token regex\\"\\n  }), \\"/\\\\\\\\bMonkey\\\\\\\\b/\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// Monkey \\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"GO! Bananas, Monkey?\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"match\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token regex\\"\\n  }), \\"/\\\\\\\\bMonke\\\\\\\\b/\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// null \\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"GO! Bananas, Monkey?\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"match\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token regex\\"\\n  }), \\"/\\\\\\\\bGO\\\\\\\\b/\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// Go \\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"GO! Bananas, Monkey?\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"match\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token regex\\"\\n  }), \\"/\\\\\\\\bBanana\\\\\\\\b/\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// null \\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"As you see in:\\"), mdx(\\"ul\\", null, mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, \\"example 1: \\", mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"Monkey\\"), \\" is matched, since its ending as \\\\u201Cword boundary\\\\u201D\\"), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, \\"example 3: \\", mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"GO\\"), \\" is matched, since its starting as \\\\u201Cword boundary\\\\u201D\\"), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, \\"example 2/4: \\", mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"Monke\\"), \\" & \\", mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"Banana\\"), \\" both are NOT matched, since its not ending/starting with a boundary\\")), mdx(\\"p\\", null, \\"Let\\\\u2019s take another example. Try capturing time from the below items, where time is a xx:yy two digit numbers:\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" timestr1 \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"I drink coffee at 09:00 AM and try to finish by 11:00 AM.\\\\\\"\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"+\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"Sometimes I even do an afternoon tea around 16:00.\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"+\\"), \\" \\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"But tea at18:00isn\'t tea, is it? Nor is 123:456PM\\\\\\"\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// ??\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"So, looks like we are capturing two digits numbers which can be\\\\ncaptured by \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"\\\\\\\\d\\"), \\" and quantifying them as \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"{2}\\"), \\" occurrences like \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"\\\\\\\\d{2}\\"), \\".\\\\nAnd seperate them with a \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\":\\"), \\". Cool. How about avoid the 18:00 \\\\uD83E\\\\uDD14\\"), mdx(\\"p\\", null, \\"The word boundary \\\\uD83D\\\\uDE2E that will do it! Putting it all together, it looks like so:\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), \\"timestr1\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"match\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token regex\\"\\n  }), \\"/\\\\\\\\b\\\\\\\\d{2}:\\\\\\\\d{2}\\\\\\\\b/g\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// => [\\\\\\"09:00\\\\\\", \\\\\\"11:00\\\\\\", \\\\\\"16:00\\\\\\"]\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"Wow \\\\uD83D\\\\uDE2E Or not yet?\\"), mdx(\\"h3\\", null, \\"The \\", mdx(\\"code\\", _extends({\\n    parentName: \\"h3\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"new RegExp\\")), mdx(\\"p\\", null, \\"In basics, we talked about how there\\\\u2019s yet another syntax for creating a regex. \\"), mdx(\\"p\\", null, \\"This new method comes with its own pros and cons, lets do cons first:\\\\nWe need to escape \\", mdx(\\"em\\", {\\n    parentName: \\"p\\"\\n  }, \\"Escape Characters\\"), \\" like \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"\\\\\\\\ ^ * ( ) .\\"), \\" and more such stuff.\\"), mdx(\\"p\\", null, \\"But this new expression, also allows variable substitution.\\\\nWe\\\\u2019ll first see how to escape characters and then try variable substitution.\\"), mdx(\\"p\\", null, \\"If we want to re-write the time-regex, it\\\\u2019ll need to escapse those \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"\\\\\\\\\\"), \\" characters:\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" r \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"new\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"RegExp\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"\\\\\\\\\\\\\\\\b\\\\\\\\\\\\\\\\d{2}:\\\\\\\\\\\\\\\\d{2}\\\\\\\\\\\\\\\\b\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"g\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"timestr1\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"match\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"r\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// => [\\\\\\"09:00\\\\\\", \\\\\\"11:00\\\\\\", \\\\\\"16:00\\\\\\"]\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"Not pretty I know! The second argument for the RegExp constructor is the flags we allow in.\\\\nIn the above example, its the globals flag to find all the time hours. \\"), mdx(\\"p\\", null, \\"Let\\\\u2019s say we wanted to capture post fix for a set of distributed system\\\\nnames. Really contrived example below, but stay with me. \\"), mdx(\\"p\\", null, \\"We have lots of different systems. Each system has a unique ID\\\\nwhich suffixed by a UUID, which is either a number/UUID.\\"), mdx(\\"p\\", null, \\"e.g.: \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"variable_1\\"), \\", \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"distributedVariable_uu1_22d_334_d\\"), \\", etc.\\"), mdx(\\"p\\", null, \\"Let\\\\u2019s try and extract that UUID:\\\\nWe know we\\\\u2019re looking for a system name followed by the ID, let\\\\u2019s make a postfix catcher?\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"typescript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-typescript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-typescript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" t1\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"string\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"controller_1\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" t2\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"string\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"controller_uu1-4dd-3ee-41\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" t3\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"string\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"controller_8\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" t4\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"string\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"shard_1\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" t5\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"string\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"shard_uu1-4dd-3ee-41\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" t6\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"string\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"shard\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" t7\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"string\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"shard_\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" getUUID \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"s\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"string\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" prefix\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"string\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"string\\")), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" match \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" s\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"match\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"new\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"RegExp\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token template-string\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token template-punctuation string\\"\\n  }), \\"`\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation-punctuation punctuation\\"\\n  }), \\"${\\"), \\"prefix\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation-punctuation punctuation\\"\\n  }), \\"}\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"_([a-zA-Z0-9\\\\\\\\-]+)$\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token template-punctuation string\\"\\n  }), \\"`\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" match \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"&&\\"), \\" match\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"getUUID\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"t1\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"controller\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// => 1\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"getUUID\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"t2\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"controller\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// => uu1-4dd-3ee-41\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"getUUID\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"t4\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"shard\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// 1\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"getUUID\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"t5\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"shard\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"//=> uu1-4dd-3ee-41\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"getUUID\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"t6\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"shard\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"//=> null\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin\\"\\n  }), \\"console\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"getUUID\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"t7\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"shard\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"//=> null\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"Found it useful? Still got more examples, hang tight! \\"), mdx(\\"p\\", null, \\"Let\\\\u2019s say you got to parse filtering expression in log-query languages.\\\\nWhat\\\\u2019s that you\\\\u2019d ask? Well a super high level w/o going into the depths could be: \\"), mdx(\\"blockquote\\", null, mdx(\\"p\\", {\\n    parentName: \\"blockquote\\"\\n  }, \\"Every log-query languages being offered in logging solutions across the cloud providers have a way to expression their query and a filtering expression.\\")), mdx(\\"p\\", null, \\"Let\\\\u2019s see with an example. Here we are searching \\\\u201Clogs\\\\u201D and would like to capture the filter expressions into variables of \\"), mdx(\\"table\\", null, mdx(\\"thead\\", {\\n    parentName: \\"table\\"\\n  }, mdx(\\"tr\\", {\\n    parentName: \\"thead\\"\\n  }, mdx(\\"th\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Name\\"), mdx(\\"th\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Description\\"))), mdx(\\"tbody\\", {\\n    parentName: \\"table\\"\\n  }, mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"FIELD_NAME\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"field name or the column/key of the log\\")), mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"OP\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"operator viz. \\", mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"=\\"), \\", \\", mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"=>\\"), \\", \\", mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"<=\\"), \\", \\", mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\">\\"), \\", etc\\")), mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"VALUE\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"the value of the operator\\")))), mdx(\\"p\\", null, \\"Example 1: \\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"bash\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-bash line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-bash\\"\\n  }), \\"search logs \\\\nWHERE resource.type \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"my-instance\\\\\\"\\"), \\" \\\\nAND \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token builtin class-name\\"\\n  }), \\"type\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" ERROR \\"), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"Example 2:\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"bash\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-bash line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-bash\\"\\n  }), \\"search logs2\\\\nWHERE resource.type \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"!=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"API\\\\\\"\\"), \\"\\\\nAND api.response.code \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"400\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"This is what we\\\\u2019ll be extracting out of the two examples.\\\\nI\\\\u2019ve called \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"1.1\\"), \\" and \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"1.2\\"), \\" for second value of expression filters. \\"), mdx(\\"table\\", null, mdx(\\"thead\\", {\\n    parentName: \\"table\\"\\n  }, mdx(\\"tr\\", {\\n    parentName: \\"thead\\"\\n  }, mdx(\\"th\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Name\\"), mdx(\\"th\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Example 1.1\\"), mdx(\\"th\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Example 1.2\\"), mdx(\\"th\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Example 2.1\\"), mdx(\\"th\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), \\"Example 2.2\\"))), mdx(\\"tbody\\", {\\n    parentName: \\"table\\"\\n  }, mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"FIELD_NAME\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"resource.type\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"type\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"resource.type\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"api.response.code\\"))), mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"OP\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"=\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"=\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"!=\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"!=\\"))), mdx(\\"tr\\", {\\n    parentName: \\"tbody\\"\\n  }, mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"VALUE\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"\\\\\\"my-instance\\\\\\"\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"\\\\\\"ERROR\\\\\\"\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"API\\")), mdx(\\"td\\", _extends({\\n    parentName: \\"tr\\"\\n  }, {\\n    \\"align\\": null\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"td\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"400\\"))))), mdx(\\"p\\", null, \\"How do we go about this. Let\\\\u2019s start with operators since we know they\\\\u2019ll be constants. \\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"OPERATORS\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"=|>=|<=|!=|>|<\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"Next what do we allow for values? Everything? Lets use the greedy capturing mechanism?\\\\nSomething like \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\".*\\"), \\" should work fine, looks, like quotes are optional. \\"), mdx(\\"p\\", null, \\"Surely we\\\\u2019ll factor that in.\\"), mdx(\\"p\\", null, \\"How about anything except whitespace? like \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"[^\\\\\\\\\\\\\\\\s]+\\")), mdx(\\"p\\", null, \\"How can we capture the fieldName? Looks like it can constain periods or other special stuff - lets try\\\\n\\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"[a-zA-Z\\\\\\\\.\\\\\\\\_]+\\"), \\"? \\\\uD83E\\\\uDD14 How does it matter what the fieldName is? \\"), mdx(\\"p\\", null, \\"Can I just say anything except operators? like \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"[^${OPERATORS}]\\")), mdx(\\"p\\", null, \\"So our final regex should capture specific groups like \\", mdx(\\"strong\\", {\\n    parentName: \\"p\\"\\n  }, \\"fieldName\\"), \\", \\", mdx(\\"strong\\", {\\n    parentName: \\"p\\"\\n  }, \\"op\\"), \\" & \\", mdx(\\"strong\\", {\\n    parentName: \\"p\\"\\n  }, \\"value\\"), \\" .\\\\nTo capture those we\\\\u2019ll use the round braces \\", mdx(\\"code\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"()\\"), \\". \\"), mdx(\\"p\\", null, \\"And it looks like so: \\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"new\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"RegExp\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token template-string\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token template-punctuation string\\"\\n  }), \\"`\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"([^\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation-punctuation punctuation\\"\\n  }), \\"${\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"OPERATORS\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation-punctuation punctuation\\"\\n  }), \\"}\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"]+)(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation-punctuation punctuation\\"\\n  }), \\"${\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"OPERATORS\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation-punctuation punctuation\\"\\n  }), \\"}\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\")([^\\\\\\\\\\\\\\\\s]+)\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token template-punctuation string\\"\\n  }), \\"`\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"ul\\", null, mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"([^${OPERATORS}]+)\\"), \\": captures anything except operators\\"), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"([${OPERATORS}])\\"), \\": captures a single operator\\"), mdx(\\"li\\", {\\n    parentName: \\"ul\\"\\n  }, mdx(\\"code\\", _extends({\\n    parentName: \\"li\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"([^\\\\\\\\\\\\\\\\s]+)\\"), \\": captures everything except whitespace.\\")), mdx(\\"p\\", null, \\"Boom! \\\\uD83D\\\\uDCA5\\"), mdx(\\"p\\", null, \\"For the sake of the example, we\\\\u2019ll consider nothing comes after the filters\\\\nand \\", mdx(\\"strong\\", {\\n    parentName: \\"p\\"\\n  }, \\"WHERE\\"), \\" is the keyword specifying the start of it.\\"), mdx(\\"p\\", null, \\"Let\\\\u2019s put all that together and try it:\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"javascript\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-javascript line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" q1\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" string \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token template-string\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token template-punctuation string\\"\\n  }), \\"`\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"search logs2 WHERE resource.type != \\\\\\"API\\\\\\" AND api.response.code = 400\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token template-punctuation string\\"\\n  }), \\"`\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" q2\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" string \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token template-string\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token template-punctuation string\\"\\n  }), \\"`\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"search logs WHERE resource.type = \\\\\\"my-instance\\\\\\" AND type = ERROR \\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token template-punctuation string\\"\\n  }), \\"`\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" q3\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" string \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token template-string\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token template-punctuation string\\"\\n  }), \\"`\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"search logs WHERE resource__type = \\\\\\"my-instance\\\\\\" AND type = ERROR \\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token template-punctuation string\\"\\n  }), \\"`\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"WHERE\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" string \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"WHERE\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"AND\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" string \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"AND\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"OPERATORS\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"=|>=|<=|!=|>|<\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"interface\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"Filter\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  fieldName\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" string\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  op\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" string\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  value\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" string\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" regex \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"new\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"RegExp\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token template-string\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token template-punctuation string\\"\\n  }), \\"`\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"([^\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation-punctuation punctuation\\"\\n  }), \\"${\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"OPERATORS\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation-punctuation punctuation\\"\\n  }), \\"}\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"]+)(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation-punctuation punctuation\\"\\n  }), \\"${\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"OPERATORS\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token interpolation-punctuation punctuation\\"\\n  }), \\"}\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\")([^\\\\\\\\\\\\\\\\s]+)\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token template-punctuation string\\"\\n  }), \\"`\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" parseFilter \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"q\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" string\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" Filter\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" filters \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" q\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"split\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"WHERE\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"if\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"!\\"), \\"filters \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"||\\"), \\" filters\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), \\"length \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"<\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" filterStr \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" filters\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" filterStr\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"split\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token constant\\"\\n  }), \\"AND\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"reduce\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), \\"prev\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" curr\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" strippedCurrent \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" curr\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"replace\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token regex\\"\\n  }), \\"/ /g\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), \\"match\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" fieldName\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" op\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" value\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" strippedCurrent\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"match\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"regex\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"if\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"!\\"), \\"match\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" prev\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" filter\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\":\\"), \\" Filter \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n      fieldName\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" op\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" value\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"...\\"), \\"prev\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" filter\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"parseFilter\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"q1\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"/**\\\\n * => [ \\\\n *  { fieldName: \'resource.type\', op: \'!=\', value: \'\\\\\\"API\\\\\\"\' },\\\\u2008\\\\n *  { fieldName: \'api.response.code\', op: \'=\', value: \'400\' } \\\\n * ]\\\\u2008\\\\n *  */\\"), \\" \\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"parseFilter\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"q2\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"/**\\\\n * [ \\\\n *  { fieldName: \'resource.type\', op: \'=\', value: \'\\\\\\"my-instance\\\\\\"\' },\\\\u2008\\\\n *  { fieldName: \'type\', op: \'=\', value: \'ERROR\' } \\\\n * ]\\\\u2008\\\\n */\\"), \\"\\\\nconsole\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"log\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"parseFilter\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"q3\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"// => \\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token comment\\"\\n  }), \\"/**\\\\n * [ \\\\n *  { fieldName: \'resource__type\', op: \'=\', value: \'\\\\\\"my-instance\\\\\\"\' },\\\\n *  { fieldName: \'type\', op: \'=\', value: \'ERROR\' } \\\\n * ]\\\\u2008\\\\n */\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"I might add more advanced specific examples as I come across, but hopefully you found that useful. \\"), mdx(\\"h2\\", {\\n    \\"id\\": \\"Future-Stuff\\",\\n    \\"style\\": {\\n      \\"position\\": \\"relative\\"\\n    }\\n  }, mdx(\\"a\\", _extends({\\n    parentName: \\"h2\\"\\n  }, {\\n    \\"href\\": \\"#Future-Stuff\\",\\n    \\"aria-label\\": \\"Future Stuff permalink\\",\\n    \\"className\\": \\"auto-link-header-class before\\"\\n  }), mdx(\\"svg\\", _extends({\\n    parentName: \\"a\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"height\\": \\"20\\",\\n    \\"version\\": \\"1.1\\",\\n    \\"viewBox\\": \\"0 0 16 16\\",\\n    \\"width\\": \\"20\\"\\n  }), mdx(\\"path\\", _extends({\\n    parentName: \\"svg\\"\\n  }, {\\n    \\"fillRule\\": \\"evenodd\\",\\n    \\"d\\": \\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"\\n  })))), \\"Future Stuff\\"), mdx(\\"p\\", null, \\"I did a lot of multiline regex when I was an intern to play with logstash\\\\nand capturing the right amount of data from logs, but honestly I don\\\\u2019t remember\\\\nthose examples, except them being really cool \\\\uD83D\\\\uDE0E\\"), mdx(\\"p\\", null, \\"Also, I haven\\\\u2019t played much with substitution and look-around regex stuff,\\\\nbut if I do - I\\\\u2019ll update this post :) \\"), mdx(\\"p\\", null, \\"Until next time \\\\u262E\\\\uFE0F\\"));\\n}\\n;\\nMDXContent.isMDXComponent = true;","frontmatter":{"path":"/regular-expressions","type":"blog","date":"Feb 20, 2020","title":"Regular Expressions"},"excerpt":"Everyone has used regular expressions sometime of life to check validation \\nof strings or you know capture a particular group of text you m…"}},{"node":{"id":"7f28ebcf-5d2f-5924-9bd5-8036984e587c","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\\n\\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\\n\\n/* @jsx mdx */\\nvar _frontmatter = {\\n  \\"title\\": \\"Simple countdown timer\\",\\n  \\"date\\": \\"2019-04-24\\",\\n  \\"path\\": \\"/simple-count-downtimer\\",\\n  \\"type\\": \\"blog\\",\\n  \\"tags\\": [\\"react\\", \\"javascript\\"]\\n};\\n\\nvar makeShortcode = function makeShortcode(name) {\\n  return function MDXDefaultShortcode(props) {\\n    console.warn(\\"Component \\" + name + \\" was not imported, exported, or provided by MDXProvider as global scope\\");\\n    return mdx(\\"div\\", props);\\n  };\\n};\\n\\nvar layoutProps = {\\n  _frontmatter: _frontmatter\\n};\\nvar MDXLayout = \\"wrapper\\";\\nreturn function MDXContent(_ref) {\\n  var components = _ref.components,\\n      props = _objectWithoutProperties(_ref, [\\"components\\"]);\\n\\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\\n    components: components,\\n    mdxType: \\"MDXLayout\\"\\n  }), mdx(\\"p\\", null, \\"I was recently trying to make a simple countdown timer which counts from a specific time-interval and \\\\u201Cfinishes\\\\u201D itself.\\"), mdx(\\"p\\", null, \\"I just found it amazing that a few lines of code could bring in such a thing!\\\\nthe code just uses a state called \\\\u201Cminutes\\\\u201D which gets initialized with the total number of seconds for which the timer stays.\\"), mdx(\\"p\\", null, \\"The component accepts minutes till which it must stay alive, converts that into seconds, runs the countdown and then clears the internal logic.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"jsx\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-jsx line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-jsx\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"<\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"Timer\\")), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token attr-name\\"\\n  }), \\"classNames\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token attr-value\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"=\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"\\\\\\"\\"), \\"time-text\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"\\\\\\"\\")), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token attr-name\\"\\n  }), \\"minutes\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token script language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token script-punctuation punctuation\\"\\n  }), \\"=\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"Number\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"10\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\")), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"/>\\"))), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"And here\\\\u2019s the entire code.\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"jsx\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-jsx line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-jsx\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"import\\"), \\" React\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" Fragment\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" useState\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" useEffect \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"from\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"react\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function-variable function\\"\\n  }), \\"Timer\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" minutes\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" classNames \\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"if\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"!\\"), \\"minutes\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"null\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), \\"seconds\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" setSeconds\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"useState\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"minutes \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"*\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"60\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"useEffect\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"let\\"), \\" timeout \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"setInterval\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n      \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"setSeconds\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"seconds \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"-\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"1000\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"if\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"seconds \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"<\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n      \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"clearTimeout\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"timeout\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), \\"\\\\n\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"\\\\n      \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"clearInterval\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"timeout\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"[\\"), \\"seconds\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"]\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" showMins \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" Math\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"floor\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"seconds \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"/\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"60\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" showSeconds \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" seconds \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"%\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"60\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"const\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function-variable function\\"\\n  }), \\"PadString\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token parameter\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\" number \\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"=>\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"String\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"number\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\".\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token function\\"\\n  }), \\"padStart\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"2\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\",\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\"0\\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"if\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"!\\"), \\"showMins \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"&&\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"!\\"), \\"showSeconds\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"||\\"), \\" showMins \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token operator\\"\\n  }), \\"<\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token number\\"\\n  }), \\"0\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"<\\"), \\"span\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token attr-name\\"\\n  }), \\"className\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token script language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token script-punctuation punctuation\\"\\n  }), \\"=\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"classNames\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\">\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token plain-text\\"\\n  }), \\"Complete!\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"</\\"), \\"span\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\">\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"return\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"(\\"), \\"\\\\n    \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"<\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"Fragment\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\">\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token plain-text\\"\\n  }), \\"\\\\n      \\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"<\\"), \\"span\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token attr-name\\"\\n  }), \\"className\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token script language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token script-punctuation punctuation\\"\\n  }), \\"=\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"classNames\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\">\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token plain-text\\"\\n  }), \\"\\\\n        \\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"<\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"PadString\\")), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token attr-name\\"\\n  }), \\"number\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token script language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token script-punctuation punctuation\\"\\n  }), \\"=\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"showMins\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\")), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"/>\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token plain-text\\"\\n  }), \\":\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"<\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"PadString\\")), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token attr-name\\"\\n  }), \\"number\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token script language-javascript\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token script-punctuation punctuation\\"\\n  }), \\"=\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), \\"showSeconds\\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\")), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"/>\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token plain-text\\"\\n  }), \\"\\\\n      \\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"</\\"), \\"span\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\">\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"{\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token string\\"\\n  }), \\"\\\\\\" \\\\\\"\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token plain-text\\"\\n  }), \\"\\\\n      remaining\\\\n    \\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token tag\\"\\n  }), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"</\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token class-name\\"\\n  }), \\"Fragment\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"span\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\">\\")), \\"\\\\n  \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\")\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\"}\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\"), \\"\\\\n\\\\n\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"export\\"), \\" \\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token keyword\\"\\n  }), \\"default\\"), \\" Timer\\", mdx(\\"span\\", _extends({\\n    parentName: \\"code\\"\\n  }, {\\n    \\"className\\": \\"token punctuation\\"\\n  }), \\";\\")), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, mdx(\\"img\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"src\\": \\"/blog/simple-count-downtimer/count-down-timer.gif\\",\\n    \\"alt\\": \\"count-down-timer\\"\\n  }))), mdx(\\"p\\", null, \\"And below\\\\u2019s a codepen link:\\"), mdx(\\"p\\", null, mdx(\\"a\\", _extends({\\n    parentName: \\"p\\"\\n  }, {\\n    \\"href\\": \\"https://codepen.io/dixitk13/pen/WNQPKye\\",\\n    \\"rel\\": \\"nofollow noopener noreferrer external\\"\\n  }), \\"https://codepen.io/dixitk13/pen/WNQPKye\\")));\\n}\\n;\\nMDXContent.isMDXComponent = true;","frontmatter":{"path":"/simple-count-downtimer","type":"blog","date":"Apr 24, 2019","title":"Simple countdown timer"},"excerpt":"I was recently trying to make a simple countdown timer which counts from a specific time-interval and “finishes” itself. I just found it am…"}},{"node":{"id":"cabe11ee-61b8-5105-b8b9-98220edb4708","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\\n\\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\\n\\n/* @jsx mdx */\\nvar _frontmatter = {\\n  \\"title\\": \\"One liner chats?\\",\\n  \\"date\\": \\"2019-01-10\\",\\n  \\"path\\": \\"/one-liner-chats\\",\\n  \\"type\\": \\"blog\\",\\n  \\"tags\\": [\\"communication\\", \\"chat\\"]\\n};\\n\\nvar makeShortcode = function makeShortcode(name) {\\n  return function MDXDefaultShortcode(props) {\\n    console.warn(\\"Component \\" + name + \\" was not imported, exported, or provided by MDXProvider as global scope\\");\\n    return mdx(\\"div\\", props);\\n  };\\n};\\n\\nvar layoutProps = {\\n  _frontmatter: _frontmatter\\n};\\nvar MDXLayout = \\"wrapper\\";\\nreturn function MDXContent(_ref) {\\n  var components = _ref.components,\\n      props = _objectWithoutProperties(_ref, [\\"components\\"]);\\n\\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\\n    components: components,\\n    mdxType: \\"MDXLayout\\"\\n  }), mdx(\\"p\\", null, \\"The entire world is hooked on messaging and being connected digitally.\\\\nOur world revolves around notifications and checking them or needing to check them due to on-call duties or maybe you are just the kind of person who replies to chats instantly.\\"), mdx(\\"p\\", null, \\"The notification sound of iMessage is just iconic or has become iconic. But do multiple notifications irritate you?\\"), mdx(\\"p\\", null, \\"Do you get irritated by 5 notifications grouped under the same application by a single friend of yours?\\"), mdx(\\"h2\\", {\\n    \\"id\\": \\"Scenario-1\\",\\n    \\"style\\": {\\n      \\"position\\": \\"relative\\"\\n    }\\n  }, mdx(\\"a\\", _extends({\\n    parentName: \\"h2\\"\\n  }, {\\n    \\"href\\": \\"#Scenario-1\\",\\n    \\"aria-label\\": \\"Scenario 1 permalink\\",\\n    \\"className\\": \\"auto-link-header-class before\\"\\n  }), mdx(\\"svg\\", _extends({\\n    parentName: \\"a\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"height\\": \\"20\\",\\n    \\"version\\": \\"1.1\\",\\n    \\"viewBox\\": \\"0 0 16 16\\",\\n    \\"width\\": \\"20\\"\\n  }), mdx(\\"path\\", _extends({\\n    parentName: \\"svg\\"\\n  }, {\\n    \\"fillRule\\": \\"evenodd\\",\\n    \\"d\\": \\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"\\n  })))), \\"Scenario 1\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"text\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-text line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"[10:15 AM] John Parker: Hi Dixit\\\\n[10:15 AM] John Parker: About that PR\\\\n[10:16 AM] John Parker: Did you get a chance to look at it\\\\n[10:16 AM] John Parker: ?\\\\n[10:17 AM] John Parker: Its just a small change from the ticket TKT-123\\\\n[10:17 AM] John Parker: Here\'s a link for the same\\\\n[10:18 AM] John Parker: https://github.com/TKT/pulls/321\\\\n[10:20 AM] Dixit Patel: Nope, totally forgot. Lemme do it right away!\\\\n[10:25 AM] John Parker: Also, that PR doesn\'t fix 123 completely,\\\\n[10:25 AM] John Parker: its a sub-task\\\\n[10:25 AM] John Parker: jira stuff you know ...\\\\n[10:26 AM] John Parker: but boss signed off\\\\n[10:26 AM] John Parker: gotta ship it\\\\n[10:30 AM] Dixit Patel: Right, on it.\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"blockquote\\", null, mdx(\\"p\\", {\\n    parentName: \\"blockquote\\"\\n  }, \\"I do! There, I said it! \\\\uD83D\\\\uDE48\\")), mdx(\\"p\\", null, \\"Most of people in this world might have used one or another form of chat/messaging\\\\nlike iMessage, Jabber, Slack, Teams, etc. Today, at most workplaces messaging is an essential part of communication for most people working w/ each other.\\"), mdx(\\"p\\", null, \\"Software engineers all have a habit of writing code and\\\\nusing the most popular version control to manage their code called GIT.\\"), mdx(\\"p\\", null, \\"Can you follow that with your chats? - Absolutely!\\"), mdx(\\"p\\", null, \\"Here\\\\u2019s what I do, or rather how my pings look like:\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"text\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-text line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"[10:15 AM] Dixit: Hi John, about that PR, did you get a\\\\nchance to look at it? Its just a small change from the\\\\nticket TKT-123. Here\'s a link for the same:\\\\nhttps://github.com/TKT/pulls/321\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"Further on if John wants to say \\\\u201CHe\\\\u2019s looking at it\\\\u201D, he either reacts with\\\\nan \\\\u201CACK\\\\u201D reaction/emoji on the same message or says in a straight one liner,\\\\nand the conversation could maybe be something like:\\"), mdx(\\"h2\\", {\\n    \\"id\\": \\"Scenario-2\\",\\n    \\"style\\": {\\n      \\"position\\": \\"relative\\"\\n    }\\n  }, mdx(\\"a\\", _extends({\\n    parentName: \\"h2\\"\\n  }, {\\n    \\"href\\": \\"#Scenario-2\\",\\n    \\"aria-label\\": \\"Scenario 2 permalink\\",\\n    \\"className\\": \\"auto-link-header-class before\\"\\n  }), mdx(\\"svg\\", _extends({\\n    parentName: \\"a\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"height\\": \\"20\\",\\n    \\"version\\": \\"1.1\\",\\n    \\"viewBox\\": \\"0 0 16 16\\",\\n    \\"width\\": \\"20\\"\\n  }), mdx(\\"path\\", _extends({\\n    parentName: \\"svg\\"\\n  }, {\\n    \\"fillRule\\": \\"evenodd\\",\\n    \\"d\\": \\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"\\n  })))), \\"Scenario 2\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"text\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-text line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"[10:15 AM] Dixit Patel: Hi John, about that PR, did you get a\\\\nchance to look at it? Its just a small change from the\\\\nticket TKT-123. Here\'s a link for the same:\\\\nhttps://github.com/TKT/pulls/321 <\\\\uD83D\\\\uDC4C>\\\\n\\\\n[10:16 AM] John Parker: Nah, I didn\'t get a chance mate.\\\\nLemme do that right away.\\\\n\\\\n[10:17 AM] Dixit Patel: Also, that PR doesn\'t completely fix TKT-123, but\\\\nattempts a sub-task for it. Boss says ship it and complete the TKT-123\\\\nlater in the day.\\\\n\\\\n[10:18 AM] John Parker: Right, on it. Also The TKT-331 kinda\\\\nneeds some priority. Seems to me like its breaking on\\\\nChrome 83 due to downloads being blocked in iframe,\\\\nbefore customers report. Should be a small fix.\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"Now one would ask, what does this benefit me with?\\"), mdx(\\"p\\", null, \\"Well, I\\\\u2019ll say why maintain commit history with 52th word mark and wrap the rest of the commit message at 72th word mark?\\"), mdx(\\"h2\\", {\\n    \\"id\\": \\"-HISTORY-\\",\\n    \\"style\\": {\\n      \\"position\\": \\"relative\\"\\n    }\\n  }, mdx(\\"a\\", _extends({\\n    parentName: \\"h2\\"\\n  }, {\\n    \\"href\\": \\"#-HISTORY-\\",\\n    \\"aria-label\\": \\" HISTORY  permalink\\",\\n    \\"className\\": \\"auto-link-header-class before\\"\\n  }), mdx(\\"svg\\", _extends({\\n    parentName: \\"a\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"height\\": \\"20\\",\\n    \\"version\\": \\"1.1\\",\\n    \\"viewBox\\": \\"0 0 16 16\\",\\n    \\"width\\": \\"20\\"\\n  }), mdx(\\"path\\", _extends({\\n    parentName: \\"svg\\"\\n  }, {\\n    \\"fillRule\\": \\"evenodd\\",\\n    \\"d\\": \\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\"\\n  })))), \\"\\\\uD83D\\\\uDCDC HISTORY \\\\uD83D\\\\uDCDC\\"), mdx(\\"p\\", null, \\"Its\\\\u2019s a powerful thing. Commit history is a very important thing!\\\\nIt helps understand the how the code has been developing and what churn has\\\\nbeen happening in the codebase, etc etc.\\"), mdx(\\"p\\", null, \\"To me scenario 1 looks like a commit history which is shown below:\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"text\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-text line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"* 5d53d5a - complete\\\\n* 3b97cf3 - wip\\\\n* 8c2e4b8 - pull from master\\\\n* 4407227 - boss called wip\\\\n* 70cdc42 - typo\\\\n* 329f368 - fix padding/margin\\\\n* 18007ad - #ABC321 in progress\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"Where as the scenario 2 looks like:\\"), mdx(\\"div\\", {\\n    \\"className\\": \\"gatsby-highlight\\",\\n    \\"data-language\\": \\"text\\"\\n  }, mdx(\\"pre\\", _extends({\\n    parentName: \\"div\\"\\n  }, {\\n    \\"style\\": {\\n      \\"counterReset\\": \\"linenumber NaN\\"\\n    },\\n    \\"className\\": \\"language-text line-numbers\\"\\n  }), mdx(\\"code\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"className\\": \\"language-text\\"\\n  }), \\"* 6e53924 - Fix TKT-333 bug found via review w/ @jparker\\\\n* 844b34c - Fix TKT-331 chrome 83 iframe download\\\\n* 57152ff - Feat TKT-322 allowing i18n for only the menus\\"), mdx(\\"span\\", _extends({\\n    parentName: \\"pre\\"\\n  }, {\\n    \\"aria-hidden\\": \\"true\\",\\n    \\"className\\": \\"line-numbers-rows\\",\\n    \\"style\\": {\\n      \\"whiteSpace\\": \\"normal\\",\\n      \\"width\\": \\"auto\\",\\n      \\"left\\": \\"0\\"\\n    }\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  }), mdx(\\"span\\", {\\n    parentName: \\"span\\"\\n  })))), mdx(\\"p\\", null, \\"Which one do you like more? Retrospection is the key, scroll two pages up and\\\\nyou\\\\u2019ll have conversations which kinda helps remember the status of things.\\"), mdx(\\"p\\", null, \\"Use threads.\\\\nThreads will let you condense/group those conversations into singular items.\\"), mdx(\\"p\\", null, \\"Together we can make \\\\u201Cchat-history-great\\\\u201D!\\\\uD83C\\\\uDF7B\\"));\\n}\\n;\\nMDXContent.isMDXComponent = true;","frontmatter":{"path":"/one-liner-chats","type":"blog","date":"Jan 10, 2019","title":"One liner chats?"},"excerpt":"The entire world is hooked on messaging and being connected digitally.\\nOur world revolves around notifications and checking them or needing…"}}],"totalCount":6}}}')}}]);
//# sourceMappingURL=c5c6ea59f6063ae1f43365f7c25313b02f1478ff-c4daaf88540c8b35f4e0.js.map